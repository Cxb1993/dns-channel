gamma=0
outinterv=0
USE rtchecks
USE ../dnsdata
USE ../dnsdirect
USE ../tke/convenience
USE poisson_solver

INLINE FUNCTION xbound(INTEGER i)=IF i < 0 THEN i+2*nxd ELSE IF i>2*nxd-1 THEN i-2*nxd ELSE i
INLINE FUNCTION zbound(INTEGER i)=IF i < 0 THEN i+nzd ELSE IF i>nzd-1 THEN i-nzd ELSE i

REAL Retau,lambda2th,lambda2th_meanvortex,box_length_plus,box_width_plus,box_height_plus,control_volume_length_plus,control_volume_width_plus,max_tilt_angle,phi0
REAL control_volume_height_plus,search_width_angle,search_height_angle,search_height_plus,qsv_min_length,max_vortex_height,min_vortex_height
INTEGER max_vortices_per_wall
FILE eduction_in=OPEN("eduction.in"); 
READ BY NAME FROM eduction_in Retau,lambda2th,lambda2th_meanvortex,box_length_plus,box_width_plus,box_height_plus,control_volume_length_plus,control_volume_width_plus
READ BY NAME FROM eduction_in control_volume_height_plus,search_width_angle,search_height_angle,search_height_plus,qsv_min_length,max_vortex_height,min_vortex_height
READ BY NAME FROM eduction_in max_vortices_per_wall,max_tilt_angle,phi0
CLOSE eduction_in

ARRAY(0..20) OF CHAR fieldname, vtkname
INTEGER nfmin, nfmax, dn, nftot
ASK nfmin, nfmax, dn
nftot=nfmax-nfmin+1
FILE outfile
SINGLE tmpu, tmpv, tmpw, tmp
SHARED ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF COMPLEX pres=0
SHARED ARRAY(0..nxd-1,0..nzd-1) OF COMPLEX pd=0 
SHARED ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF COMPLEX hp=0 	     !! Auxiliary variables for pressure computation
SHARED ARRAY(0..nxd-1,0..nzd-1) OF COMPLEX hpd=0		     !! Auxiliary variables for pressure computation
COMPLEX pres_up, pres_down, dpdy_down				     !! Auxiliary variables for pressure computation

SHARED ARRAY(0..nx,-nz..nz,-1..ny+1) OF DERIVS gradV=0   	 
SHARED ARRAY(0..nxd-1,0..nzd-1) OF DERIVS gradVd=0		     
SHARED ARRAY(0..2*nxd-1,0..nzd-1,0..ny) OF REAL lambda2=0            !! Lambda2 field
SHARED ARRAY(0..2*nxd-1,0..nzd-1,0..ny) OF REAL omegax=0	     !! Streamwise vorticity
ARRAY(0..ny DIV 2) OF STRUCTURE(REAL U,W,Uy,Wy) meanvel=0            !! Mean velocity profile
ARRAY(0..ny DIV 2,0..dn-1) OF STRUCTURE(REAL U,W,Uy,Wy) phasevel=0   !! Phase-averaged mean velocity profile
SHARED ARRAY(0..ny DIV 2) OF STRUCTURE(REAL Q1,Q2,Q3,Q4) uv_quad=0   !! RSS profiles (quadrant)
SHARED ARRAY(0..ny DIV 2,0..dn-1) OF STRUCTURE(REAL Q1,Q2,Q3,Q4) uv_quad_phase=0   !! RSS profiles (quadrant)
ARRAY(0..ny DIV 2) OF STRUCTURE(REAL uv) rms=0			     !! RMS profiles (total) 
REAL aa,bb,cc,dd,ee,ff,AA,BB,CC,DD,trace
COMPLEX lam1,lam2,lam3,Par1,Par2,Par3

INTEGER xp=0, xp2=0, lxfwd, lxfwdmax=0, lxbwd, ixp, izp, midx, midz, count
INTEGER iymax=0, izmin=0, iymin=0, search_iymin, search_iymax
REAL lambda2min=0.0, resx, resz, tmpr, azimut, elevation, vortex_length
INTEGER box_length, search_width, search_height, box_width, box_height, volume_length, volume_width, volume_height
resx = 2*PI/(alfa0*(2*nxd)); resz = 2*PI/(beta0*nzd)

search_width = CEILING{TAN(search_width_angle*PI/180)*resx/resz}			         !! Angle the vortex core is searched within (Jeong&Hussain 30Â°)
box_length   = CEILING[box_length_plus/(resx*Retau)]; box_length = MIN(box_length, nxd)
box_width    = CEILING[box_width_plus/(resz*Retau)];  box_width  = MIN(box_width, nzd DIV 2)
DO INC box_height WHILE (y(box_height+1)-y(0))*Retau<box_height_plus
volume_length = CEILING[control_volume_length_plus/(resx*Retau)]; volume_length = MIN(volume_length, nxd)
volume_width  = CEILING[control_volume_width_plus/(resz*Retau)];  volume_width  = MIN(box_width, nzd DIV 2)
DO INC volume_height WHILE (y(volume_height+1)-y(0))*Retau<control_volume_height_plus
DO INC iymax WHILE (y(iymax+1)-y(0))*Retau<search_height_plus                                    !! Maximum search height 	
ARRAY(-nxd..nxd, 1..2) OF INTEGER vortex_cores=0	                                         !! z,y coordinates of the centerline of a single candidate vortex
ARRAY(0..dn-1) OF INTEGER educed=0				                                 !! Number of educed vortices
ARRAY(1..max_vortices_per_wall,1..3) OF INTEGER vortex_centers=0                                 !! x,y,z coordinates of all educed vortices on one wall

WRITE BY NAME box_length, box_height, box_width

SUBROUTINE dVintegral(REAL RESULT^, f(*,*,*))
  RESULT=0; REAL pm,trapz
  LOOP FOR ix=-volume_length+1 TO volume_length-1 BY 2 AND iz=-volume_width+1 TO volume_width-1 BY 2
    pm=0; trapz=0
    LOOP FOR iy=1 TO volume_height-1 BY 2 
      yp1=y(iy+1)-y(iy); ym1=y(iy-1)-y(iy); a1=-1/3*ym1+1/6*yp1+1/6*yp1*yp1/ym1; a3=+1/3*yp1-1/6*ym1-1/6*ym1*ym1/yp1; a2=yp1-ym1-a1-a3
      pm=~+a1*f(ix,iz,iy-1) + a2*f(ix,iz,iy) + a3*f(ix,iz,iy+1); 
      trapz=~+a1*f(ix-1,iz,iy-1) + a2*f(ix-1,iz,iy) + a3*f(ix-1,iz,iy+1)+a1*f(ix+1,iz,iy-1) + a2*f(ix+1,iz,iy) + a3*f(ix+1,iz,iy+1)+
              a1*f(ix,iz-1,iy-1) + a2*f(ix,iz-1,iy) + a3*f(ix,iz-1,iy+1)+a1*f(ix,iz+1,iy-1) + a2*f(ix,iz+1,iy) + a3*f(ix,iz+1,iy+1);
    REPEAT 
    RESULT=~+[1/3*pm+1/6*(trapz)]*(4*resx*resz)
  REPEAT
END dVintegral

ARRAY(-box_length..box_length,-box_width..box_width,0..box_height,0..dn-1) OF REAL lambdaavg=0				!! Conditionally averaged lambda2 field
ARRAY(-box_length..box_length,-box_width..box_width,0..box_height,0..dn-1) OF STRUCTURE(REAL u,v,w) Vavg=0		!! Conditionally averaged velocity field
ARRAY(-box_length..box_length,-box_width..box_width) OF STRUCTURE(REAL ux,uy,uz,vx,vy,vz,wx,wy,wz) gradVdavg=0          !! Derivative of the conditionally averaged velocity field
ARRAY(-box_length..box_length,-box_width..box_width,0..box_height,0..dn-1) OF STRUCTURE(REAL Q2 Q4) rms_uv=0		!! Conditionally averaged rms field 
ARRAY(-box_length..box_length,-box_width..box_width,0..box_height,0..dn-1) OF STRUCTURE(REAL Q1,Q2,Q3,Q4) rmsavg_uv=0	!! rms field of the conditionally averaged velocity field
ARRAY(-box_length..box_length,-box_width..box_width,0..box_height,0..dn-1) OF STRUCTURE(REAL u,v,w) omegaavg=0          !! Conditionally averaged streamwise vorticity 
ARRAY(-box_length..box_length,-box_width..box_width,0..box_height,0..dn-1) OF REAL pavg=0		                !! Conditionally averaged pressure field 
ARRAY(-box_length..box_length,-box_width..box_width,0..box_height,0..dn-1) OF REAL pstrain=0				!! Conditionally averaged pressure strain field
ARRAY(0..box_height,0..dn-1) OF INTEGER educed_at_height=0								!! Number of vortices educed at a certain height 
BOOLEAN continue, gofwd, hit_another_structure                                                                          !! Booleans for checking structure eduction and a posteriori validity
POINTER TO STORED STRUCTURE(
   ARRAY(0..dn-1,0..box_height,-box_length..box_length,-box_width..box_width) OF REAL lambdaimage
   ARRAY(0..dn-1,0..box_height,-box_length..box_length,-box_width..box_width) OF STRUCTURE(REAL u,v,w) Vavgimage
   ARRAY(0..dn-1,0..box_height,-box_length..box_length,-box_width..box_width) OF STRUCTURE(REAL Q2 Q4) rmsimage
   ARRAY(0..dn-1,0..box_height,-box_length..box_length,-box_width..box_width) OF STRUCTURE(REAL Q1,Q2,Q3,Q4) rmsavgimage
   ARRAY(0..dn-1,0..box_height,-box_length..box_length,-box_width..box_width) OF STRUCTURE(REAL u,v,w) omegaavgimage
   ARRAY(0..dn-1,0..box_height,-box_length..box_length,-box_width..box_width) OF REAL pavgimage
   ARRAY(0..dn-1,0..box_height,-box_length..box_length,-box_width..box_width) OF REAL pstrainimage )condfield
outfile = CREATE("educed.dat")
outfile2 = CREATE("educed_coord.dat")

! Compute the mean and phase-averaged velocity profiles
! =============================================================
WRITE "Computing averages..."
LOOP mean FOR n=nfmin TO nfmax
  diskfield = OPEN('Field'n'.fld'); WITH diskfield, V(0,0,*): u.REAL=uavimage(*); V(0,0,*).w.REAL=wavimage(*); CLOSE diskfield
  WITH V(0,0,*): deriv(u.REAL,u.IMAG); deriv(w.REAL,w.IMAG); LeftLUDivStep2(u.IMAG,D0mat); LeftLUDivStep2(w.IMAG,D0mat);
  LOOP FOR iy=0 TO ny DIV 2
    WITH meanvel(iy),V(0,0,*):
    U=~+1/2*[u(iy).REAL + u(ny-iy).REAL]; Uy=~+1/2*[u(iy).IMAG + u(ny-iy).IMAG]; 
    W=~+1/2*[w(iy).REAL + w(ny-iy).REAL]; Wy=~+1/2*[w(iy).IMAG + w(ny-iy).IMAG];
    WITH phasevel(iy,(n-nfmin) MOD dn), V(0,0,*):
    U=~+1/2*[u(iy).REAL + u(ny-iy).REAL]; Uy=~+1/2*[u(iy).IMAG + u(ny-iy).IMAG]; 
    W=~+1/2*[w(iy).REAL + w(ny-iy).REAL]; Wy=~+1/2*[w(iy).IMAG + w(ny-iy).IMAG];
  REPEAT LOOP    
REPEAT mean
DO WITH meanvel(iy): U=~/nftot; W=~/nftot; Uy=~/nftot; Wy=~/nftot FOR iy=0 TO ny DIV 2
DO WITH phasevel(iy,i): 
  U=~/(nftot DIV dn)-meanvel(iy).U; W=~/(nftot DIV dn)-meanvel(iy).W; Uy=~/(nftot DIV dn)-meanvel(iy).Uy; Wy=~/(nftot DIV dn)-meanvel(iy).Wy
FOR iy = 0 TO ny DIV 2 AND ALL i

! Compute some fields (p, lambda2, uv_quad)
! ==============================================================
LOOP files FOR n=nfmin TO nfmax
  ! Load the field file (0,0) included
  fieldname = WRITE('Field'n'.fld'); WRITE fieldname; diskfield = OPEN(fieldname);
  WRITE " ","Computing lambda2, velocity gradient and pressure..."
  WITH diskfield:
    V(0,0,*).u.REAL=uavimage(miny..maxy)
    LOOP FOR iy = miny TO maxy
      fieldbuf=fieldimage(iy)
      DO V(ix,iz,iy).v=fieldbuf(ix,iz).v; V(ix,iz,iy).u=fieldbuf(ix,iz).eta FOR ALL ix,iz EXCEPT ix=0 AND iz=0
    REPEAT LOOP
    vetaTOuvw
    V(0,0,*).w.REAL=wavimage(miny..maxy);
  ! Compute uv
  LOOP FOR iy=0 TO ny DIV 2 WITH rms(iy):
    uv=~+1/2*{2*[SUM (V(ix,*,iy).u | V(ix,*,iy).v).REAL FOR ix=1 TO nx]+ [-2*[SUM (V(ix,*,ny-iy).u | V(ix,*,ny-iy).v).REAL FOR ix=1 TO nx]]}
    uv=~+1/2*{[V(0,*,iy).u | V(0,*,iy).v].REAL + (-1)*[V(0,*,ny-iy).u | V(0,*,ny-iy).v].REAL}  
  REPEAT LOOP    
  CLOSE diskfield
  ! Compute the velocity gradient tensor (required for lambda2 and pressure)
  velocity_gradient(gradV)
  !
  PARALLEL LOOP FOR ismp=0 TO nsmp-1
  LOOP FOR iy=0 TO ny
      ! Velocity field in physical space
      LOOP FOR ix=ismp*(nx+1) DIV nsmp TO (ismp+1)*(nx+1) DIV nsmp -1
        Vd(ix,0..nz)=V(ix,0..nz,iy)
        Vd(ix,nz+1..nzd-nz-1)=0
        Vd(ix,nzd+(-nz..-1))=V(ix,-nz..-1,iy)
        WITH Vd(ix,*): IFT(u); IFT(v); IFT(w);
      REPEAT
      IF ismp=0 THEN Vd(nx+1..nxd-1)=0
      SYNC(ismp,nsmp)
      DO WITH Vd(*,iz): RFT(u); RFT(v); RFT(w); 
      FOR iz=ismp*(nzd) DIV nsmp TO (ismp+1)*(nzd) DIV nsmp -1
      SYNC(ismp,nsmp)
      ! Compute uv_quad(iy)
      IF ismp=0 THEN
        LOOP average_RSS_quadrants FOR ix=0 TO 2*nxd-1 AND iz=0 TO nzd-1
	  IF iy <= ny DIV 2 THEN WITH uv_quad_phase(iy,(n-nfmin) MOD dn):
	    tmpr=Vd(*,iz).u.REALIFIED(ix)*Vd(*,iz).v.REALIFIED(ix)
            IF (Vd(*,iz).u.REALIFIED(ix)-meanvel(iy).U-phasevel(iy,(n-nfmin) MOD dn).U)<0  THEN 
              IF Vd(*,iz).v.REALIFIED(ix)<0 THEN Q3=~+tmpr ELSE Q2=~+tmpr END IF 
            ELSE
              IF Vd(*,iz).v.REALIFIED(ix)<0 THEN Q4=~+tmpr ELSE Q1=~+tmpr END IF 
            END IF
	  ELSE IF iy > ny DIV 2 THEN WITH uv_quad(ny-iy)
	    tmpr=-Vd(*,iz).u.REALIFIED(ix)*Vd(*,iz).v.REALIFIED(ix)
            IF (Vd(*,iz).u.REALIFIED(ix)-meanvel(ny-iy).U-phasevel(ny-iy,(n-nfmin) MOD dn).U)<0 THEN 
              IF -Vd(*,iz).v.REALIFIED(ix)<0 THEN Q3=~+tmpr ELSE Q2=~+tmpr END IF
            ELSE 
              IF -Vd(*,iz).v.REALIFIED(ix)<0 THEN Q4=~+tmpr ELSE Q1=~+tmpr END IF 
            END IF
	  END IF
	REPEAT average_RSS_quadrants
      END IF
      ! Velocity gradient in physical space and pressure r.h.s.
      INTEGER iyl,iyh
      IF iy=0 THEN iyl=iy-1; iyh=iy; ELSE IF iy=ny THEN iyl=iy; iyh=ny+1; ELSE iyl=iy; iyh=iy
      LOOP FOR i=iyl TO iyh
        LOOP FOR ix=ismp*(nx+1) DIV nsmp TO (ismp+1)*(nx+1) DIV nsmp -1
          gradVd(ix,0..nz)=gradV(ix,0..nz,i)
          gradVd(ix,nz+1..nzd-nz-1)=0
          gradVd(ix,nzd+(-nz..-1))=gradV(ix,-nz..-1,i)
          WITH gradVd(ix,*): IFT(ux); IFT(vx); IFT(wx); IFT(uy); IFT(vy); IFT(wy); IFT(uz); IFT(vz); IFT(wz) 
        REPEAT
        IF ismp=0 THEN gradVd(nx+1..nxd-1)=0
        SYNC(ismp,nsmp)
        DO 
           WITH gradVd(*,iz): RFT(ux); RFT(vx); RFT(wx); RFT(uy); RFT(vy); RFT(wy); RFT(uz); RFT(vz); RFT(wz) 
           DO WITH gradVd(ix,iz):
             hpd(ix,iz).REAL = 2*(ux.REAL*vy.REAL+vy.REAL*wz.REAL+ux.REAL*wz.REAL-vx.REAL*uy.REAL-wx.REAL*uz.REAL-wy.REAL*vz.REAL)
             hpd(ix,iz).IMAG = 2*(ux.IMAG*vy.IMAG+vy.IMAG*wz.IMAG+ux.IMAG*wz.IMAG-vx.IMAG*uy.IMAG-wx.IMAG*uz.IMAG-wy.IMAG*vz.IMAG)
           FOR ALL ix
           HFT(hpd(*,iz))
        FOR iz=ismp*(nzd) DIV nsmp TO (ismp+1)*(nzd) DIV nsmp -1
	SYNC(ismp,nsmp)
	DO FFT(hpd(ix,*)); hp(ix,0..nz,i) = hpd(ix,0..nz); hp(ix,-nz..-1,i) = hpd(ix,nzd+(-nz..-1)); FOR ix=ismp*(nx+1) DIV nsmp TO (ismp+1)*(nx+1) DIV nsmp -1
      REPEAT 
      ! deformation tensor and omegax
      DO WITH gradVd(*,iz):
        LOOP FOR ix=0 TO 2*nxd-1
	  aa= 	( ux.REALIFIED(ix)*ux.REALIFIED(ix) + ux.REALIFIED(ix)*ux.REALIFIED(ix) + 
		  uy.REALIFIED(ix)*vx.REALIFIED(ix) + vx.REALIFIED(ix)*uy.REALIFIED(ix) +
		  uz.REALIFIED(ix)*wx.REALIFIED(ix) + wx.REALIFIED(ix)*uz.REALIFIED(ix) )/2
	  bb= 	( vx.REALIFIED(ix)*uy.REALIFIED(ix) + uy.REALIFIED(ix)*vx.REALIFIED(ix) +
		  vy.REALIFIED(ix)*vy.REALIFIED(ix) + vy.REALIFIED(ix)*vy.REALIFIED(ix) + 
		  vz.REALIFIED(ix)*wy.REALIFIED(ix) + wy.REALIFIED(ix)*vz.REALIFIED(ix) )/2
	  cc= 	( wx.REALIFIED(ix)*uz.REALIFIED(ix) + uz.REALIFIED(ix)*wx.REALIFIED(ix) +
		  wy.REALIFIED(ix)*vz.REALIFIED(ix) + vz.REALIFIED(ix)*wy.REALIFIED(ix) +
		  wz.REALIFIED(ix)*wz.REALIFIED(ix) + wz.REALIFIED(ix)*wz.REALIFIED(ix) )/2
	  dd=   ( ux.REALIFIED(ix)*uy.REALIFIED(ix) + ux.REALIFIED(ix)*vx.REALIFIED(ix) +
		  uy.REALIFIED(ix)*vy.REALIFIED(ix) + vx.REALIFIED(ix)*vy.REALIFIED(ix) +
		  uz.REALIFIED(ix)*wy.REALIFIED(ix) + wx.REALIFIED(ix)*vz.REALIFIED(ix) )/2
	  ee= 	( ux.REALIFIED(ix)*uz.REALIFIED(ix) + ux.REALIFIED(ix)*wx.REALIFIED(ix) +
		  uy.REALIFIED(ix)*vz.REALIFIED(ix) + vx.REALIFIED(ix)*wy.REALIFIED(ix) +
		  uz.REALIFIED(ix)*wz.REALIFIED(ix) + wx.REALIFIED(ix)*wz.REALIFIED(ix) )/2
	  ff= 	( vx.REALIFIED(ix)*uz.REALIFIED(ix) + uy.REALIFIED(ix)*wx.REALIFIED(ix) +
		  vy.REALIFIED(ix)*vz.REALIFIED(ix) + vy.REALIFIED(ix)*wy.REALIFIED(ix) +
		  vz.REALIFIED(ix)*wz.REALIFIED(ix) + wy.REALIFIED(ix)*wz.REALIFIED(ix) )/2
	  trace = aa+bb+cc
	  AA=1; BB=-aa-bb-cc; CC=aa*bb+aa*cc+bb*cc-dd^2-ee^2-ff^2; DD=-aa*bb*cc+cc*dd^2+bb*ee^2-2*dd*ee*ff+aa*ff^2
	  !radici del polinomio caratteristico
	  Par1= -2*BB^3 + 9*BB*CC - 27*DD; Par2= (-BB^2*CC^2 + 4*CC^3 + 4*BB^3*DD - 18*BB*CC*DD + 27*DD^2)
	  Par2= 3^(3/2)*(Par2)^(1/2);      Par3= (-BB^2 + 3*CC)/(3*2^(2/3)*(Par1 + Par2)^(1/3))
	  lam1= -BB/3 - 2^(1/3)*(-BB^2 + 3*CC)/(3*(Par1 + Par2)^(1/3)) + (1/(3*2^(1/3)))*((Par1 + Par2)^(1/3))
	  lam2= -BB/3 + (1 + I*3^(1/2))*Par3 - (1/(6*2^(1/3)))*(1 - I*3^(1/2))*(Par1 + Par2)^(1/3)
	  lam3= trace - lam2 -lam1
          omegax(ix,iz,iy)=[(gradVd(*,iz).wy.REALIFIED(ix)-(IF iy<(ny DIV 2) THEN phasevel(iy,(n-nfmin) MOD dn).Wy ELSE -phasevel(ny-iy,(n-nfmin) MOD dn).Wy))-gradVd(*,iz).vz.REALIFIED(ix)]/Retau
	  lambda2(ix,iz,iy)=REAL(lam1)/Retau^2
	  IF REAL(lam1)=MIN(REAL(lam1),REAL(lam2),REAL(lam3)) THEN lambda2(ix,iz,iy) = MIN(REAL(lam2),REAL(lam3))/Retau^2
	  IF REAL(lam1)=MAX(REAL(lam1),REAL(lam2),REAL(lam3)) THEN lambda2(ix,iz,iy) = MAX(REAL(lam2),REAL(lam3))/Retau^2
        REPEAT
      FOR iz=ismp*(HI+1) DIV nsmp TO (ismp+1)*(HI+1) DIV nsmp -1
      SYNC(ismp,nsmp)
  REPEAT
  ! Compute pressure
  IF ismp=0 THEN dpdy_down=0; DO dpdy_down = ~ + ni*d240(id)*V(0,0,id+1).v FOR id=-2 TO 2; solve_neumann(hp(0,0,*), dpdy_down, 0, pres(0,0,*))
  LOOP FOR ix=ismp*(nx+1) DIV nsmp TO (ismp+1)*(nx+1) DIV nsmp -1 AND iz=-nz TO nz EXCEPT ix=0 AND iz=0
	alfa = alfa0*ix; beta = beta0*iz; k2 = alfa^2 + beta^2
	pres_up = calcpn(ix,iz); pres_down = calcp0(ix,iz)
	solve_dirichelet(hp(ix,iz,*), pres_up, pres_down, k2, pres(ix,iz,*))
  REPEAT 
  REPEAT LOOP

  ! Detecting QSV: CONDITIONAL AVERAGE
  ! ================================================================================= 
WRITE " ","Starting conditional averaging..."
  LOOP whichwall FOR wall = -1 TO 1 BY 2

    REAL vorticity; INTEGER vort_sign
    INLINE FUNCTION ybound(INTEGER i)=IF wall < 0 THEN i ELSE ny-i
    INLINE FUNCTION phase(INTEGER i)=IF vort_sign>0 THEN i ELSE [(dn DIV 2)+i] MOD dn
    count=0; xp=0; IF wall = -1 THEN search_iymin=1; search_iymax=iymax; ELSE search_iymin=ny-iymax; search_iymax=ny; END IF
    
  LOOP educe WHILE xp < 2*nxd-1
     ! Search for a minimum of lambda2
     lambda2min=100000
     LOOP minimum FOR iz=0 TO nzd-1 AND iy = search_iymin TO search_iymax 											
       IF lambda2(xp,iz,iy)<lambda2min THEN lambda2min=lambda2(xp,iz,iy); izmin=iz; iymin=iy
     REPEAT minimum
     	
     IF lambda2min < lambda2th THEN
        vortex_cores(0,1) = iymin; vortex_cores(0,2) = izmin;
	continue=YES; gofwd=YES
	xp2 = xp; hit_another_structure=NO
        ! March to search vortex centerline
        LOOP search
	    IF gofwd THEN INC xp2 ELSE DEC xp2
	    ixp = xbound(xp2); lambda2min = 100000
	    search_height=iymin; DO INC search_height WHILE ABS(y(search_height)-y(iymin))<=resx*TAN(search_height_angle*PI/180) AND search_height<ny; INTEGER topb=search_height
            search_height=iymin; DO DEC search_height WHILE ABS(y(search_height)-y(iymin))<=resx*TAN(search_height_angle*PI/180) AND search_height>0;  INTEGER lowb=search_height
            lb=izmin-search_width; rb=izmin+search_width 
            LOOP minimumfwd FOR iz=lb TO rb AND iy=lowb TO topb
	      tmpr=lambda2(ixp,zbound(iz),iy); IF tmpr<lambda2min THEN lambda2min=tmpr; izmin=iz; iymin=iy; ELSE IF tmpr=100000 THEN hit_another_structure=NO; ! XXX too severe, change this
	    REPEAT minimumfwd
            IF lambda2min < lambda2th AND iymin<topb AND iymin>lowb AND izmin>lb AND izmin<rb THEN
              vortex_cores(xp2-xp,1)=iymin; vortex_cores(xp2-xp,2)=izmin 
	    ELSE
              IF NOT gofwd THEN continue=NO; lxbwd=xp2+1;
              IF gofwd THEN gofwd=NO; continue=YES; lxfwd=xp2-1; xp2=xp; iymin=vortex_cores(0,1); izmin=vortex_cores(0,2)
            END IF
            IF iymin=topb AND iymin=lowb AND izmin=lb AND izmin=rb THEN hit_another_structure=YES; WRITE "A structure has been refused because the maximum of lambda2 was on the allowed boundary"
	REPEAT search WHILE continue
        ! Find the midpoint of the vortex and its length
        midx=ROUND[(lxfwd+lxbwd)/2];   midz=vortex_cores(midx-xp,2);   midy=ybound(vortex_cores(midx-xp,1)); vortex_length=0;
	IF lxfwd>lxbwd THEN DO vortex_length=~+SQRT[resx^2+resz^2*(vortex_cores(i+1-xp,2)-vortex_cores(i-xp,2))^2 + (y(vortex_cores(i+1-xp,1))-y(vortex_cores(i-xp,1)))^2] FOR i=lxbwd TO lxfwd-1 ELSE vortex_length=0
        ! If the vortex length exceeds a threshold and the vortex did not hit another vortex, compute the vortex angles, which are needed to see if we accept the vortex
	IF vortex_length*Retau > qsv_min_length AND NOT hit_another_structure THEN   
            vorticity=-omegax(xbound(midx),zbound(vortex_cores(midx-xp,2)),vortex_cores(midx-xp,1))*wall
            vort_sign=IF vorticity>0 THEN 1 ELSE -1;
            xmean=0.5*Retau*resx*(lxfwd+lxbwd); zmean=Retau*resz*[SUM vortex_cores(i-xp,2)   FOR i=lxbwd TO lxfwd]/(lxfwd-lxbwd+1); 
            REAL ymean=0.0; DO ymean=~+Retau*y(vortex_cores(i-xp,1))/(lxfwd-lxbwd+1)  FOR i=lxbwd TO lxfwd
            azimut=0;    tmpr=0; DO azimut=~+(Retau*resx*i-xmean)*(Retau*resz*vortex_cores(i-xp,2)-zmean);  tmpr=~+[(Retau*resx*i-xmean)^2]  FOR i=lxbwd TO lxfwd; azimut=vort_sign*ATAN(~/tmpr)*180/PI
	    elevation=0; tmpr=0; DO elevation=~+(Retau*resx*i-xmean)*[Retau*y(vortex_cores(i-xp,1))-ymean]; tmpr=~+[(Retau*resx*i-xmean)^2]  FOR i=lxbwd TO lxfwd; elevation=-wall*ATAN(~/tmpr)*180/PI
            ! If the vortex respects critiria, write its characteristics to a file
	    IF elevation>0 AND ABS(azimut-phi0)<max_tilt_angle AND Retau*y(midy)<max_vortex_height AND Retau*y(midy)>min_vortex_height THEN 
              WRITE "Educed structure of length " vortex_length*Retau ",  xz-angle " azimut, " xy-angle " elevation, "vorticity", vort_sign, "on wall", wall, "and phase", 2*(phase((n-1) MOD dn))"/"dn" pi"
	      WRITE TO outfile y(midy)*Retau, vortex_length*Retau, azimut, elevation, 2*(phase((n-1) MOD dn))/dn
              DO WRITE TO outfile2 Retau*i*resx, Retau*resz*vortex_cores(i-xp,2), Retau*y(ybound(vortex_cores(i-xp,1))), vort_sign, wall, 2*(phase((n-1) MOD dn))/dn FOR i=lxbwd TO lxfwd
              INC count; INC educed(phase((n-1) MOD dn)); INC educed_at_height(midy,phase((n-1) MOD dn))
              vortex_centers(count,1)=midx; vortex_centers(count,2)=midz; vortex_centers(count,3)=vort_sign;
            END IF
	END IF
        ! Remove the educed vortex from the lambda2 field (use spiral) XXX Validate this
        LOOP remove_the_educed_vortex FOR ix=lxbwd TO lxfwd
          BOOLEAN isvortex=YES; INTEGER N=10, M=7, k=0, z0=vortex_cores(ix-xp,2), y0=vortex_cores(ix-xp,1); COMPLEX zz0=z0+I*y0, zz=zz0; 
          lambda2(xbound(ix),zbound(z0),y0)=100000
          LOOP WHILE isvortex
            isvortex=NO; 
            LOOP FOR N TIMES
              zz=~-I^(-FLOOR(SQRT(4*(REAL(k))+1))-1); k=k+1; COMPLEX d=(zz0-zz)/ABS(zz0-zz); 
              COMPLEX nn=zz+d; nn=ROUND(nn.REAL)+I*ROUND(nn.IMAG)
              !COMPLEX nn=(IF ABS(d.REAL)>=ABS(d.IMAG) THEN d.REAL ELSE 0) + I*(IF ABS(d.IMAG)>=ABS(d.REAL) THEN d.IMAG ELSE 0 ); nn=~+zz; nn=ROUND(nn.REAL)+I*ROUND(nn.IMAG)
              INTEGER z0=ROUND(zz.REAL), y0=ROUND(zz.IMAG), zn=ROUND(nn.REAL), yn=ROUND(nn.IMAG)
              IF y0>=0 AND y0<=ny THEN
                IF lambda2(xbound(ix),zbound(zn),y0)<=lambda2th AND lambda2(xbound(ix),zbound(zn),yn)=100000 THEN isvortex=YES; lambda2(xbound(ix),zbound(zn),yn)=100000
              END IF
            REPEAT
            N=N+M; M=M+1;
          REPEAT
        REPEAT remove_the_educed_vortex
     ELSE 

	  INC xp;

     END IF	
  REPEAT educe
  
  ! Average the conditional field
  ! ========================================================
  WRITE "Average the conditional fields..."
  IF count>0 THEN
  LOOP average FOR iy=0 TO box_height
     Vd=0; gradVd=0; pd=0;
     ! Remove the mean and periodic component from the velocity and its gradient (already done for omegax)
     WITH V(0,0,ybound(iy)), gradV(0,0,ybound(iy)):
       u=~-meanvel(iy).U-phasevel(iy,phase((n-1) MOD dn)).U;   w=~-meanvel(iy).W-phasevel(iy,phase((n-1) MOD dn)).W;
      uy=~-wall*meanvel(iy).Uy-wall*phasevel(iy,phase((n-1) MOD dn)).Uy; 
     ! Transform to physical space
     PARALLEL LOOP FOR ismp=0 TO nsmp-1
        LOOP FOR ix=ismp*(nx+1) DIV nsmp TO (ismp+1)*(nx+1) DIV nsmp -1
           Vd(ix,0..nz)=V(ix,0..nz,ybound(iy));         Vd(ix,nzd+(-nz..-1))=V(ix,-nz..-1,ybound(iy))
           gradVd(ix,0..nz)=gradV(ix,0..nz,ybound(iy)); gradVd(ix,nzd+(-nz..-1))=gradV(ix,-nz..-1,ybound(iy))
           pd(ix,0..nz)=pres(ix,0..nz,ybound(iy));      pd(ix,nzd+(-nz..-1))=pres(ix,-nz..-1,ybound(iy))
           WITH gradVd(ix,*), Vd(ix,*): IFT(ux); IFT(vx); IFT(wx); IFT(uy); IFT(uz); IFT(u); IFT(v); IFT(w); IFT(pd(ix,*))
        REPEAT
        SYNC(ismp,nsmp)
	DO   
           WITH gradVd(*,iz), Vd(*,iz): RFT(ux); RFT(vx); RFT(wx); RFT(uy); RFT(uz); RFT(u); RFT(v); RFT(w) ; RFT(pd(*,iz))
        FOR iz=ismp*(nzd) DIV nsmp TO (ismp+1)*(nzd) DIV nsmp -1
     REPEAT  
     ! Average
     LOOP all_found_vortices FOR ev=1 TO count
       LOOP FOR ix=-box_length TO box_length AND iz=-box_width TO box_width
          vort_sign=vortex_centers(ev,3); ixp=xbound(vortex_centers(ev,1)+ix); izp=zbound(vortex_centers(ev,2)+iz*vort_sign)
          pavg(ix, iz, iy,phase((n-1) MOD dn)) = ~ + pd(*, izp).REALIFIED(ixp)
          WITH Vavg(ix,iz,iy,phase((n-1) MOD dn)): u=~+Vd(*,izp).u.REALIFIED(ixp); v=~-wall*Vd(*,izp).v.REALIFIED(ixp); w=~+vort_sign*Vd(*,izp).w.REALIFIED(ixp)
          WITH rms_uv(ix,iz,iy,phase((n-1) MOD dn)): 
              tmpr = -wall*Vd(*,izp).u.REALIFIED(ixp)*Vd(*,izp).v.REALIFIED(ixp)
              IF tmpr<0 THEN IF Vd(*,izp).u.REALIFIED(ixp)<0 THEN Q2=~-tmpr ELSE Q4=~-tmpr END IF; END IF
	  WITH omegaavg(ix,iz,iy,phase((n-1) MOD dn)): 
	      u=~-wall*vort_sign*omegax(ixp,izp,ybound(iy))
              v=~+vort_sign*[gradVd(*,izp).uz.REALIFIED(ixp)-gradVd(*,izp).wx.REALIFIED(ixp)]/Retau
              w=~-wall*[gradVd(*,izp).vx.REALIFIED(ixp)-gradVd(*,izp).uy.REALIFIED(ixp)]/Retau
       REPEAT
     REPEAT all_found_vortices
  REPEAT average
  END IF
  
  REPEAT whichwall

  !! <<<<<<==================================================================================================================================================
  
REPEAT files
CLOSE outfile
CLOSE outfile2

outfile = CREATE("mean.dat")
DO WITH meanvel(iy): WRITE TO outfile y(iy)*Retau, U, W, Uy, Wy FOR iy = 0 TO ny DIV 2
CLOSE outfile
outfile = CREATE("phasemean.dat")
DO WITH phasevel(iy,*): WRITE TO outfile y(iy)*Retau, U, W, Uy, Wy FOR iy = 0 TO ny DIV 2
CLOSE outfile


DO WITH uv_quad_phase(iy,i): 
  Q1=~/[(IF iy=ny DIV 2 THEN 2 ELSE 4)*nxd*nzd*(nftot DIV dn)]; Q2=~/[(IF iy=ny DIV 2 THEN 2 ELSE 4)*nxd*nzd*(nftot DIV dn)]
  Q3=~/[(IF iy=ny DIV 2 THEN 2 ELSE 4)*nxd*nzd*(nftot DIV dn)]; Q4=~/[(IF iy=ny DIV 2 THEN 2 ELSE 4)*nxd*nzd*(nftot DIV dn)]
FOR iy=0 TO ny DIV 2 AND i=0 TO dn -1
outfile = CREATE("rms.dat")
DO WITH rms(iy),uv_quad_phase(iy,*): 
  WRITE TO outfile y(iy)*Retau, uv/nftot, [SUM Q1(i) FOR ALL i]/dn, [SUM Q2(i) FOR ALL i]/dn, [SUM Q3(i) FOR ALL i]/dn, [SUM Q4(i) FOR ALL i]/dn
FOR iy=0 TO ny DIV 2
CLOSE outfile
DO 
  FILE outfile = CREATE("rms_"i".dat")
  DO WITH uv_quad_phase(iy,i): WRITE TO outfile y(iy)*Retau, Q1+Q2+Q3+Q4, Q1, Q2, Q3, Q4 FOR iy = 0 TO ny DIV 2
  CLOSE outfile
FOR i=0 TO dn-1



FILE mcenters
condfield= CREATE("conditional_average.fld")
FILE out3= CREATE("mean_vortex.dat")
LOOP eachphase FOR n = 1 TO dn

  ! Average conditional field
  REAL Q1int=0, Q2int=0, Q3int, Q4int=0, vortex_density, pstrainint=0
  LOOP FOR ALL ix,iy,iz WITH Vavg(ix,iz,iy,n-1),rms_uv(ix,iz,iy,n-1):
     u=~/educed(n-1); v=~/educed(n-1); w=~/educed(n-1); Q2=~/educed(n-1); Q4=~/educed(n-1);
     WITH omegaavg(ix,iz,iy,n-1): u=~/educed(n-1); v=~/educed(n-1); w=~/educed(n-1)
     pavg(ix,iz,iy,n-1)=~/educed(n-1);
  REPEAT LOOP
  
  ! XXX Recompute lambda2 or use average?
  LOOP FOR iy=0 TO box_height  
    dyp1=y(iy+1)-y(iy); dym1=y(iy-1)-y(iy); a=-dyp1/dym1/(dym1-dyp1); c=dym1/dyp1/(dym1-dyp1) ! Second order "centered" finite differences uneven grid
    DO 
     LOOP FOR ix=-box_length TO box_length
	WITH gradVdavg(ix,iz)
	    WITH Vavg(*,iz,iy,n-1):
              ux=IF ix=-box_length THEN (u(ix+1)-u(ix))/resx ELSE IF ix=box_length THEN (u(ix)-u(ix-1))/resx ELSE (u(ix+1)-u(ix-1))/(2*resx)
              vx=IF ix=-box_length THEN (v(ix+1)-v(ix))/resx ELSE IF ix=box_length THEN (v(ix)-v(ix-1))/resx ELSE (v(ix+1)-v(ix-1))/(2*resx)
              wx=IF ix=-box_length THEN (w(ix+1)-w(ix))/resx ELSE IF ix=box_length THEN (w(ix)-w(ix-1))/resx ELSE (w(ix+1)-w(ix-1))/(2*resx)
            WITH Vavg(ix,iz,*,n-1):
              uy=IF iy=0 THEN (u(iy+1)-u(iy))/(y(1)-y(0)) ELSE IF iy=box_height THEN (u(iy)-u(iy-1))/(y(iy)-y(iy-1)) ELSE a*u(iy-1)+c*u(iy+1)
              vy=IF iy=0 THEN (v(iy+1)-v(iy))/(y(1)-y(0)) ELSE IF iy=box_height THEN (v(iy)-v(iy-1))/(y(iy)-y(iy-1)) ELSE a*v(iy-1)+c*v(iy+1)
              wy=IF iy=0 THEN (w(iy+1)-w(iy))/(y(1)-y(0)) ELSE IF iy=box_height THEN (w(iy)-w(iy-1))/(y(iy)-y(iy-1)) ELSE a*w(iy-1)+c*w(iy+1)
	    WITH Vavg(ix,*,iy,n-1):
              uz=IF iz=-box_width THEN (u(iz+1)-u(iz))/resz ELSE IF iz=box_width THEN (u(iz)-u(iz-1))/resz ELSE (u(iz+1)-u(iz-1))/(2*resz)
              vz=IF iz=-box_width THEN (v(iz+1)-v(iz))/resz ELSE IF iz=box_width THEN (v(iz)-v(iz-1))/resz ELSE (v(iz+1)-v(iz-1))/(2*resz)
              wz=IF iz=-box_width THEN (w(iz+1)-w(iz))/resz ELSE IF iz=box_width THEN (w(iz)-w(iz-1))/resz ELSE (w(iz+1)-w(iz-1))/(2*resz)
	    aa= ( ux*ux + ux*ux + uy*vx + vx*uy + uz*wx + wx*uz )/2;   bb= ( vx*uy + uy*vx + vy*vy + vy*vy + vz*wy + wy*vz )/2
	    cc= ( wx*uz + uz*wx + wy*vz + vz*wy + wz*wz + wz*wz )/2;   dd= ( ux*uy + ux*vx + uy*vy + vx*vy + uz*wy + wx*vz )/2
	    ee= ( ux*uz + ux*wx + uy*vz + vx*wy + uz*wz + wx*wz )/2;   ff= ( vx*uz + uy*wx + vy*vz + vy*wy + vz*wz + wy*wz )/2
	trace = aa+bb+cc; AA=1; BB=-aa-bb-cc; CC=aa*bb+aa*cc+bb*cc-dd^2-ee^2-ff^2; DD=-aa*bb*cc+cc*dd^2+bb*ee^2-2*dd*ee*ff+aa*ff^2
	Par1= -2*BB^3 + 9*BB*CC - 27*DD; Par2= (-BB^2*CC^2 + 4*CC^3 + 4*BB^3*DD - 18*BB*CC*DD + 27*DD^2); 
        Par2= 3^(3/2)*(Par2)^(1/2); Par3= (-BB^2 + 3*CC)/(3*2^(2/3)*(Par1 + Par2)^(1/3))
	lam1= -BB/3 - 2^(1/3)*(-BB^2 + 3*CC)/(3*(Par1 + Par2)^(1/3)) + (1/(3*2^(1/3)))*((Par1 + Par2)^(1/3))
	lam2= -BB/3 + (1 + I*3^(1/2))*Par3 - (1/(6*2^(1/3)))*(1 - I*3^(1/2))*(Par1 + Par2)^(1/3)
	lam3= trace - lam2 -lam1
	lambdaavg(ix,iz,iy,n-1)=REAL(lam1)/Retau^2
	IF REAL(lam1)=MIN(REAL(lam1),REAL(lam2),REAL(lam3)) THEN lambdaavg(ix,iz,iy,n-1) = MIN(REAL(lam2),REAL(lam3))/Retau^2
	IF REAL(lam1)=MAX(REAL(lam1),REAL(lam2),REAL(lam3)) THEN lambdaavg(ix,iz,iy,n-1) = MAX(REAL(lam2),REAL(lam3))/Retau^2
        WITH gradVdavg(ix,iz): pstrain(ix,iz,iy,n-1)=pavg(ix,iz,iy,n-1)*ux/Retau
      REPEAT
    FOR iz=-box_width TO box_width
  REPEAT
  
  ! XXX Recompute quadrandts or use the available?
  DO WITH rmsavg_uv(ix,iz,iy,n-1), Vavg(ix,iz,iy,n-1):
    IF u>0 THEN 
	  IF v>0 THEN Q1=~+u*v*(1-y(iy)) ELSE Q4=~+u*v*(1-y(iy)) END IF
	ELSE 
	  IF v>0 THEN Q2=~+u*v*(1-y(iy)) ELSE Q3=~+u*v*(1-y(iy)) END IF
	END IF
  FOR ALL ix,iz AND iy=0 TO box_height

  ! Output conditional fields
  LOOP FOR iy=0 TO box_height WITH condfield
     lambdaimage(n-1,iy,*,*)=lambdaavg(*,*,iy,n-1)
     Vavgimage(n-1,iy,*,*)=Vavg(*,*,iy,n-1)
     rmsimage(n-1,iy,*,*)=rms_uv(*,*,iy,n-1)
     rmsavgimage(n-1,iy,*,*)=rmsavg_uv(*,*,iy,n-1)
     omegaavgimage(n-1,iy,*,*)=omegaavg(*,*,iy,n-1)
     pavgimage(n-1,iy,*,*)=pavg(*,*,iy,n-1)
     pstrainimage(n-1,iy,*,*)=pstrain(*,*,iy,n-1)
  REPEAT LOOP 
  
  ! Integral of Q2 and Q4 and pressure_strain in the averaged field
  vortex_density=0.5*educed(n-1)/(resx*2*box_length*resz*2*box_width*(nftot DIV dn)) ! XXX Check the vortex density
  WITH rmsavg_uv(*,*,*,n-1): dVintegral(Q1int,Q1); dVintegral(Q2int,Q2); dVintegral(Q3int,Q3); dVintegral(Q4int,Q4)
  dVintegral(pstrainint,pstrain(*,*,*,n-1))
 
  ! Mean vortex tilt angle, elevation and mean height
  ARRAY(-nxd..nxd, 1..2) OF REAL mvortex_cores=0
  ! Search vortex center with the centroid strategy
  xp2=-1; gofwd=YES; continue=YES; LOOP search_averaged_mvortex          
	    IF gofwd THEN INC xp2 ELSE DEC xp2
	    lambda2min = 100000 
            LOOP FOR iz=-box_width TO box_width AND iy = 0 TO box_height
	      IF lambdaavg(xp2,iz,iy,n-1)<lambda2min THEN lambda2min=lambdaavg(xp2,iz,iy,n-1); izmin=iz; iymin=iy
	    REPEAT       
            BOOLEAN isvortex=YES; INTEGER N=10, M=7, k=0, z0=izmin, y0=iymin, npoints=0; COMPLEX zz0=z0+I*y0, zz=zz0; 
            ARRAY(-box_width..box_width,0..box_height) OF BOOLEAN mask=0; mask(z0,y0)=YES
            WRITE BY NAME z0,y0
            LOOP WHILE isvortex            
              isvortex=NO; LOOP FOR N TIMES
                zz=~-I^(-FLOOR(SQRT(4*(REAL(k))+1))-1); INC k; COMPLEX d=(zz0-zz)/ABS(zz0-zz); 
                COMPLEX nn=zz+d; nn=ROUND(nn.REAL)+I*ROUND(nn.IMAG)
                !COMPLEX nn=(IF ABS(d.REAL)>=ABS(d.IMAG) THEN d.REAL ELSE 0) + I*(IF ABS(d.IMAG)>=ABS(d.REAL) THEN d.IMAG ELSE 0 ); nn=~+zz; nn=ROUND(nn.REAL)+I*ROUND(nn.IMAG)
                INTEGER z0=ROUND(zz.REAL), y0=ROUND(zz.IMAG), zn=ROUND(nn.REAL), yn=ROUND(nn.IMAG)
                IF y0>=0 AND y0<=box_height THEN 
                  IF lambdaavg(xp2,z0,y0,n-1)<lambda2th_meanvortex AND mask(zn,yn) THEN 
                    isvortex=YES; mask(z0,y0)=YES; INC npoints; mvortex_cores(xp2,1)=~+y(y0); mvortex_cores(xp2,2)=~+z0
                  END IF
                END IF
              REPEAT
              N=N+M; M=M+1;
            REPEAT
            IF npoints>0 THEN mvortex_cores(xp2,1)=~/npoints; mvortex_cores(xp2,2)=~/npoints
            IF npoints<=5 OR ABS(xp2)=box_length THEN
              IF NOT gofwd THEN continue=NO; lxbwd=xp2+1
              IF gofwd THEN gofwd=NO; continue=YES; lxfwd=xp2-1; xp2=0;
            END IF
  REPEAT search_averaged_mvortex WHILE continue
  WRITE BY NAME lxfwd, lxbwd
  ! Compute average vortex properties (least square)
  vortex_length=0; DO 
    vortex_length=~+SQRT[resx^2+resz^2*(mvortex_cores(i+1,2)-mvortex_cores(i,2))^2 + (mvortex_cores(i+1,1)-mvortex_cores(i,1))^2] 
  FOR i=lxbwd TO lxfwd-1
  midx=ROUND[(lxfwd+lxbwd)/2]; midy=Retau*mvortex_cores(midx,1); 
  xmean=0.5*Retau*resx*(lxfwd+lxbwd); zmean=Retau*resz*[SUM mvortex_cores(i,2) FOR i=lxbwd TO lxfwd]/(lxfwd-lxbwd+1); 
  REAL ymean=0.0; DO ymean=~+Retau*mvortex_cores(i,1)/(lxfwd-lxbwd+1)  FOR i=lxbwd TO lxfwd
  azimut=0; tmpr=0; DO 
    azimut=~+(Retau*resx*i-xmean)*(Retau*resz*mvortex_cores(i,2)-zmean); tmpr=~+[(Retau*resx*i-xmean)^2]  
  FOR i=lxbwd TO lxfwd; azimut=ATAN(~/tmpr)*180/PI
  elevation=0; tmpr=0; DO 
    elevation=~+(Retau*resx*i-xmean)*[Retau*mvortex_cores(i,1)-ymean];    tmpr=~+[(Retau*resx*i-xmean)^2]  
  FOR i=lxbwd TO lxfwd; elevation=ATAN(~/tmpr)*180/PI
  WRITE BY NAME n, educed(n-1), vortex_density, Q1int, Q2int, Q3int, Q4int, pstrainint, azimut, elevation, midx, vortex_length, midy
  WRITE TO out3 n, vortex_density, Q1int, Q2int, Q3int, Q4int, pstrainint, azimut, elevation, midx, Retau*vortex_length, midy, educed(n-1)
  mcenters=CREATE('mean_vortex_centers'n'.dat'); DO 
    WRITE TO mcenters Retau*resx*i, mvortex_cores(i,2)*resz*Retau, mvortex_cores(i,1)*Retau 
  FOR i=lxbwd TO lxfwd; CLOSE mcenters

REPEAT eachphase
CLOSE out3
outfile=CREATE("vortex_height.dat")
LOOP FOR iy=0 TO box_height
  WRITE TO outfile  Retau*y(iy), educed_at_height(iy,0..dn-1)
REPEAT
CLOSE outfile
CLOSE condfield
