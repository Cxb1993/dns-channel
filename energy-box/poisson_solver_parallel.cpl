! Definitions for machine first
ARRAY(-1..ny+1) OF REAL y_first=0; DO y_first(i)=ymin+0.5*(ymax-ymin)*[tanh(a*(2*i/ny-1))/tanh(a)+1] FOR ALL i
STRUCTURE[ARRAY(-2..2) OF REAL d0,d1,d2,d4] fderivatives(1..ny-1)
ARRAY(-2..2) OF REAL fd140,fd240
REAL Mf(0..4,0..4),tf(0..4)

IF first THEN
        LOOP FOR iy=1 TO ny-1 WITH fderivatives(iy)
                DO Mf(i,j)=(y_first(iy-2+j)-y_first(iy))**(4-i) FOR i=0 TO 4 AND j=0 TO 4; LUdecomp Mf
                tf=0; tf(0)=24
                d4(-2+(*))=Mf\tf
                DO Mf(i,j)=(5-i)*(6-i)*(7-i)*(8-i)*(y_first(iy-2+j)-y_first(iy))**(4-i) FOR i=0 TO 4 AND j=0 TO 4; LUdecomp Mf
                DO tf(i)=SUM {d4(j)*(y_first(iy+j)-y_first(iy))**(8-i)} FOR j=-2 TO 2 FOR i=0 TO 4
                d0(-2+(*))=Mf\tf
                DO Mf(i,j)=(y_first(iy-2+j)-y_first(iy))**(4-i) FOR i=0 TO 4 AND j=0 TO 4; LUdecomp Mf
                tf=0; DO tf(i)=SUM d0(j)*(4-i)*(3-i)*(y_first(iy+j)-y_first(iy))**(2-i) FOR j=-2 TO 2 FOR i=0 TO 2
                d2(-2+(*))=Mf\tf
                tf=0; DO tf(i)=SUM d0(j)*(4-i)*(y_first(iy+j)-y_first(iy))**(3-i) FOR j=-2 TO 2 FOR i=0 TO 3
                d1(-2+(*))=Mf\tf
        REPEAT

	DO Mf(i,j)=(y_first(-1+j)-y_first(0))**(4-i) FOR i=0 TO 4 AND j=0 TO 4; LUdecomp Mf
	tf=0; tf(3)=1
	fd140(-2+(*))=Mf\tf
	tf=0; tf(2)=2
	fd240(-2+(*))=Mf\tf
	DO Mf(i,j)=(y_first(-1+j)-y_first(-1))**(4-i) FOR i=0 TO 4 AND j=0 TO 4; LUdecomp Mf
END IF

INLINE FUNCTION D20(ARRAY(*) OF COMPLEX f)=d240(-2)*f(-1)+d240(-1)*f(0)+d240(0)*f(1)+d240(1)*f(2)+d240(2)*f(3)
COMPLEX FUNCTION calcp0v(INTEGER ix,iz; COMPLEX vdudy, vdwdy)
  alfa=alfa0*ix; beta=beta0*iz
  ialfa==I*alfa; ibeta==I*beta
  k2=alfa^2+beta^2
  WITH V(ix,iz)
  IF k2>0 THEN
    RESULT=-ni/k2*[ialfa*D20(u)+ibeta*D20(w)]+[ialfa*vdudy+ibeta*vdwdy]/k2
  ELSE
    RESULT=0
  END IF
END calcp0v
INLINE FUNCTION D2n(ARRAY(*) OF COMPLEX f)=d24n(-2)*f(ny-3)+d24n(-1)*f(ny-2)+d24n(0)*f(ny-1)+d24n(1)*f(ny)+d24n(2)*f(ny+1)
COMPLEX FUNCTION calcpnv(INTEGER ix,iz; COMPLEX vdudy, vdwdy)
  alfa=alfa0*ix; beta=beta0*iz
  ialfa==I*alfa; ibeta==I*beta
  k2=alfa^2+beta^2
  WITH V(ix,iz)
  IF k2>0 THEN
    RESULT=-ni/k2*[ialfa*D2n(u)+ibeta*D2n(w)]+[ialfa*vdudy+ibeta*vdwdy]/k2
  ELSE
    RESULT=0
  END IF
END calcpnv

SUBROUTINE solve_dirichelet(ARRAY(*) OF COMPLEX hp; COMPLEX pres_up, pres_down; REAL k2; POINTER TO ARRAY(*) OF COMPLEX pres)
!
! Solves the two-point boundary value problem for the pressure Fourier coefficient
!
! Input:  ARRAY(-1..ny+1) OF COMPLEX hp
!         COMPLEX pres_up, pres_down
!	  REAL k2
! Output: ARRAY(-1..ny+1) OF COMPLEX pres
!
! Note: fourth-order extrapolation is used to compute pres(-1) and pres(ny+1)
!

pres=0

! Definitions
ARRAY(1..ny-1) OF COMPLEX tn=0, sol=0
ARRAY(1..ny-1,1..ny-1) OF REAL mat=0


! Building matrix
LOOP FOR iy=3 TO ny-3
	DO WITH fderivatives(iy): mat(iy,iy+id) = d2(id) - k2*d0(id) FOR id=-2 TO 2
REPEAT
DO WITH fderivatives(2): mat(2,2+id) = d2(id) - k2*d0(id) FOR id=-1 TO 2
DO WITH fderivatives(ny-2): mat(ny-2,ny-2+id) = d2(id) - k2*d0(id) FOR id=-2 TO 1
WITH fderivatives(1):
	mat(1,1) = (d2(0)-d2(-2)/d4(-2)*d4(0))-k2*(d0(0)-d0(-2)/d4(-2)*d4(0));
	mat(1,2) = (d2(1)-d2(-2)/d4(-2)*d4(1))-k2*(d0(1)-d0(-2)/d4(-2)*d4(1));
	mat(1,3) = (d2(2)-d2(-2)/d4(-2)*d4(2))-k2*(d0(2)-d0(-2)/d4(-2)*d4(2));
WITH fderivatives(ny-1):
	mat(ny-1,ny-3) = (d2(-2)-d2(2)/d4(2)*d4(-2)) - k2*(d0(-2)-d0(2)/d4(2)*d4(-2))
	mat(ny-1,ny-2) = (d2(-1)-d2(2)/d4(2)*d4(-1)) - k2*(d0(-1)-d0(2)/d4(2)*d4(-1))
	mat(ny-1,ny-1) = (d2(0)-d2(2)/d4(2)*d4(0)) - k2*(d0(0)-d0(2)/d4(2)*d4(0))


! Building right hand side
LOOP FOR iy=1 TO ny-1
	DO tn(iy) = ~ + fderivatives(iy).d0(id) * hp(iy+id) FOR id=-2 TO 2
REPEAT
WITH fderivatives(2): tn(2) = ~ - (d2(-2) - k2*d0(-2)) * pres_down
WITH fderivatives(ny-2): tn(ny-2) = ~ - (d2(2) - k2*d0(2)) * pres_up
WITH fderivatives(1): tn(1) = ~ - [(d2(-1)-d2(-2)/d4(-2)*d4(-1)) - k2*(d0(-1)-d0(-2)/d4(-2)*d4(-1))] * pres_down
WITH fderivatives(ny-1) : tn(ny-1) = ~ - [(d2(1)-d2(2)/d4(2)*d4(1)) - k2*(d0(1)-d0(2)/d4(2)*d4(1))] * pres_up


! Solving linear system and returning solution
LUdecomp mat
sol.REAL = mat\tn.REAL
sol.IMAG = mat\tn.IMAG

DO pres(iy) = sol(iy) FOR iy=1 TO ny-1
pres(0) = pres_down;
pres(ny) = pres_up;
DO WITH fderivatives(1): pres(-1) = ~ - d4(id)/d4(-2)*pres(id+1) FOR id=-1 TO 2
DO WITH fderivatives(ny-1): pres(ny+1) = ~ -d4(id)/d4(2)*pres(ny+id-1) FOR id=-2 TO 1


END solve_dirichelet


SUBROUTINE solve_neumann(ARRAY(*) OF COMPLEX hp; COMPLEX dpdy_down; COMPLEX integral; POINTER TO ARRAY(*) OF COMPLEX pres)
!
! Solves Neumann-integral problem for the pressure Fourier coefficient (0,0)
!
! Input:  ARRAY(-1..ny+1) OF COMPLEX hp
!	  COMPLEX dpdy_up  	(Neumann boundary condition, lower wall)
! 	  COMPLEX integral	(Integral condition)
! Output: ARRAY(-1..ny+1) OF COMPLEX pres

pres=0

! Definitions
ARRAY(0..ny) OF COMPLEX tn=0, sol=0
ARRAY(0..ny,0..ny) OF REAL mat=0


! Building matrix
LOOP FOR iy=2 TO ny-2
	DO WITH fderivatives(iy): mat(iy,iy+id) = d2(id) FOR id=-2 TO 2
REPEAT
DO WITH fderivatives(1): mat(1,1+id) = d2(id) - d2(-2)/fd140(-2)*fd140(id) FOR id=-1 TO 2
DO WITH fderivatives(ny-1): mat(ny-1,ny-1+id) = d2(id) - d2(2)/d4(2)*d4(id) FOR id=-2 TO 1
LOOP FOR iy=1 TO ny-1 BY 2
	yp1=y_first(iy+1)-y_first(iy); ym1=y_first(iy-1)-y_first(iy)
	a1=-1/3*ym1+1/6*yp1+1/6*yp1*yp1/ym1
	a3=+1/3*yp1-1/6*ym1-1/6*ym1*ym1/yp1
	a2=yp1-ym1-a1-a3
	mat(ny,iy-1) = ~ + a1
	mat(ny,iy) = ~ + a2
	mat(ny,iy+1) = ~ + a3
REPEAT
DO mat(0,id+1) = fd240(id) - fd240(-2)/fd140(-2)*fd140(id) FOR id=-1 TO 2


! Building right hand side
LOOP FOR iy=1 TO ny-1
	DO tn(iy) = ~ + fderivatives(iy).d0(id) * hp(iy+id) FOR id=-2 TO 2
REPEAT
tn(1) = ~ - fderivatives(1).d2(-2) / fd140(-2) * dpdy_down
tn(ny) = integral
tn(0) = hp(0); tn(0) = ~ - fd240(-2)/fd140(-2) * dpdy_down


! Solution
LUdecomp mat
sol.REAL = mat\tn.REAL
sol.IMAG = mat\tn.IMAG

DO pres(iy) = sol(iy) FOR iy=0 TO ny
DO pres(-1) = ~ - fd140(id)/fd140(-2)*pres(id+1) FOR id=-1 TO 2; pres(-1) = ~ + dpdy_down / fd140(-2)
DO WITH fderivatives(ny-1): pres(ny+1) = ~ - d4(id)/d4(2) * pres(ny-1+id) FOR id=-2 TO 1


END solve_neumann




SUBROUTINE compute_pressure(POINTER TO ARRAY(*,*,*) OF DERIVS velder; POINTER TO ARRAY(*,*,*) OF COMPLEX _pressure_)
!
! Solves Poisson's equation for the pressure field (parallel version).
!
! Both input (V) and output (pressure) are ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) and are defined (global) outside this subroutine
! Velder=grad(V) is also retained as output, since in most postprocessing this is used.
!
! It is assumed that the spatial average of the pressure is constant = 0
!
! Since the (linear) Poisson problem decouples in wavenumber space when the rhs is known,
! this parallel version provides parallel computation of the full rhs hp(ix,iz,iy), and then the
! Dirichelet and Neumann problems for the pressure field are solved wavenumberwise by machine 'first'.
!

_pressure_=0
velder=0

! Definitions

!DERIVS=STRUCTURE(COMPLEX ux, uy, uz, vx, vy, vz, wx, wy, wz) (declared globally)
!ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF DERIVS velder=0         (declared globally)

ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF COMPLEX hp=0
ARRAY(0..nxd-1,0..nzd-1) OF DERIVS velderd=0
ARRAY(0..nxd-1,0..nzd-1) OF COMPLEX hpd=0
ARRAY(0..nxd-1,0..nzd-1) OF COMPLEX vuy0=0,vwy0=0,vvy0=0,vuyn=0,vwyn=0,vvyn=0
COMPLEX pres_up, pres_down, dpdy_down

ARRAY(-1..ny+1) OF COMPLEX slice_hp=0, hp_first=0, pres_first=0


! Fourier coefficients of spatial derivatives
LOOP FOR ix=0 TO nx AND iz=-nz TO nz
	alfa=alfa0*ix; beta=beta0*iz
	LOOP FOR iy=nyl-2 TO nyh+2 WITH velder(ix,iz,iy)
		ux=I*alfa*V(ix,iz,iy).u
		vx=I*alfa*V(ix,iz,iy).v
		wx=I*alfa*V(ix,iz,iy).w
		uz=I*beta*V(ix,iz,iy).u
		vz=I*beta*V(ix,iz,iy).v
		wz=I*beta*V(ix,iz,iy).w
	REPEAT
	deriv(V(ix,iz,*).u.REAL,velder(ix,iz,*).uy.REAL)
	deriv(V(ix,iz,*).u.IMAG,velder(ix,iz,*).uy.IMAG)
	deriv(V(ix,iz,*).v.REAL,velder(ix,iz,*).vy.REAL)
	deriv(V(ix,iz,*).v.IMAG,velder(ix,iz,*).vy.IMAG)
	deriv(V(ix,iz,*).w.REAL,velder(ix,iz,*).wy.REAL)
	deriv(V(ix,iz,*).w.IMAG,velder(ix,iz,*).wy.IMAG)
REPEAT
FlushStep1
LOOP FOR ix=0 TO nx AND iz=-nz TO nz
	LeftLUDivStep2(velder(ix,iz,*).uy.REAL,D0mat)
	LeftLUDivStep2(velder(ix,iz,*).uy.IMAG,D0mat)
	LeftLUDivStep2(velder(ix,iz,*).vy.REAL,D0mat)
	LeftLUDivStep2(velder(ix,iz,*).vy.IMAG,D0mat)
	LeftLUDivStep2(velder(ix,iz,*).wy.REAL,D0mat)
	LeftLUDivStep2(velder(ix,iz,*).wy.IMAG,D0mat)
REPEAT
FlushStep2

! Computing nonlinear term for calcp0 and calcpn
IF first THEN
  Vd=0; velderd=0
  LOOP FOR ix=0 TO nx
		velderd(ix,0..nz) = velder(ix,0..nz,0)
		velderd(ix,nzd+(-nz..-1)) = velder(ix,-nz..-1,0)
                Vd(ix,0..nz).v = V(ix,0..nz,0).v
                Vd(ix,nzd+(-nz..-1)).v = V(ix,-nz..-1,0).v
	REPEAT
  DO WITH velderd(ix,*): IFT(uy); IFT(wy); IFT(vy); WITH Vd(ix,*): IFT(v) FOR ALL ix
  DO WITH velderd(*,iz): RFT(uy); RFT(wy); RFT(vy); WITH Vd(*,iz): RFT(v) FOR ALL iz
  LOOP FOR ALL ix,iz WITH velderd(ix,iz),Vd(ix,iz):
    vuy0(ix,iz).REAL = v.REAL*uy.REAL; vuy0(ix,iz).IMAG = v.IMAG*uy.IMAG
    vwy0(ix,iz).REAL = v.REAL*wy.REAL; vwy0(ix,iz).IMAG = v.IMAG*wy.IMAG
    vvy0(ix,iz).REAL = v.REAL*vy.REAL; vvy0(ix,iz).IMAG = v.IMAG*vy.IMAG
  REPEAT
  DO HFT(vuy0(*,iz)); HFT(vwy0(*,iz)); HFT(vvy0(*,iz)) FOR ALL iz
  DO FFT(vuy0(ix,*)); FFT(vwy0(ix,*)); FFT(vvy0(ix,*)) FOR ALL ix
END IF

IF last THEN
  Vd=0; velderd=0;
  LOOP FOR ix=0 TO nx
		velderd(ix,0..nz) = velder(ix,0..nz,ny)
		velderd(ix,nzd+(-nz..-1)) = velder(ix,-nz..-1,ny)
                Vd(ix,0..nz).v = V(ix,0..nz,ny).v
                Vd(ix,nzd+(-nz..-1)).v = V(ix,-nz..-1,ny).v
	REPEAT
  DO WITH velderd(ix,*): IFT(uy); IFT(wy); IFT(vy); WITH Vd(ix,*): IFT(v) FOR ALL ix
  DO WITH velderd(*,iz): RFT(uy); RFT(wy); RFT(vy); WITH Vd(*,iz): RFT(v) FOR ALL iz
  LOOP FOR ALL ix,iz WITH velderd(ix,iz),Vd(ix,iz):
    vuyn(ix,iz).REAL = v.REAL*uy.REAL; vuyn(ix,iz).IMAG = v.IMAG*uy.IMAG
    vwyn(ix,iz).REAL = v.REAL*wy.REAL; vwyn(ix,iz).IMAG = v.IMAG*wy.IMAG
    vvyn(ix,iz).REAL = v.REAL*vy.REAL; vvyn(ix,iz).IMAG = v.IMAG*vy.IMAG
  REPEAT
  DO HFT(vuyn(*,iz)); HFT(vwyn(*,iz)); HFT(vvyn(*,iz)) FOR ALL iz
  DO FFT(vuyn(ix,*)); FFT(vwyn(ix,*)); FFT(vvyn(ix,*)) FOR ALL ix
END IF

! Computing nonlinear terms
LOOP FOR iy=nyl-2 TO nyh+2
	velderd=0; hpd=0;

	! Dealiasing derivatives
	LOOP FOR ix=0 TO nx
		velderd(ix,0..nz) = velder(ix,0..nz,iy)
		velderd(ix,nzd+(-nz..-1)) = velder(ix,-nz..-1,iy)
	REPEAT
	DO WITH velderd(ix,*): IFT(ux); IFT(uy); IFT(uz); IFT(vx); IFT(vy); IFT(vz); IFT(wx); IFT(wy); IFT(wz) FOR ALL ix
	DO WITH velderd(*,iz): RFT(ux); RFT(uy); RFT(uz); RFT(vx); RFT(vy); RFT(vz); RFT(wx); RFT(wy); RFT(wz) FOR ALL iz

	LOOP FOR ALL ix,iz WITH velderd(ix,iz):
hpd(ix,iz).REAL = 2*(ux.REAL*vy.REAL+vy.REAL*wz.REAL+ux.REAL*wz.REAL-vx.REAL*uy.REAL-wx.REAL*uz.REAL-wy.REAL*vz.REAL)
hpd(ix,iz).IMAG = 2*(ux.IMAG*vy.IMAG+vy.IMAG*wz.IMAG+ux.IMAG*wz.IMAG-vx.IMAG*uy.IMAG-wx.IMAG*uz.IMAG-wy.IMAG*vz.IMAG)
	REPEAT
	DO HFT(hpd(*,iz)) FOR ALL iz
	DO FFT(hpd(ix,*)) FOR ALL ix

	! Recovering nonlinear term
	LOOP FOR ix=0 TO nx
		hp(ix,0..nz,iy) = hpd(ix,0..nz)
		hp(ix,-nz..-1,iy) = hpd(ix,nzd+(-nz..-1))
	REPEAT
REPEAT


! ________________ Solving for coefficient (0,0) (Neumann problem)
hp_first=0; slice_hp=0; pres_first=0
DO slice_hp(iy) = hp(0,0,iy) FOR iy=miny TO maxy
IF NOT first THEN
        READ BINARY FROM prev hp_first; FLUSH prev
        hp_first = ~ + slice_hp
ELSE
        hp_first = slice_hp
END IF
IF NOT last THEN WRITE BINARY TO next hp_first; FLUSH next
IF NOT last  THEN READ BINARY FROM next hp_first; FLUSH next
IF NOT first THEN WRITE BINARY TO prev hp_first; FLUSH prev

IF first THEN
	dpdy_down = ni*[SUM fd240(id)*V(0,0,id+1).v FOR id=-2 TO 2] - vvy0(0,0)
	solve_neumann(hp_first, dpdy_down, 0, pres_first)
END IF

IF NOT first THEN READ BINARY FROM prev pres_first; FLUSH prev
IF NOT last THEN WRITE BINARY TO next pres_first; FLUSH next
DO _pressure_(0,0,iy) = pres_first(iy) FOR iy=nyl-2 TO nyh+2


! __________________ Solving for coefficient (alfa,beta) (Dirichelet problem)
LOOP FOR ix=0 TO nx AND iz=-nz TO nz EXCEPT ix=0 AND iz=0
	alfa = alfa0*ix; beta = beta0*iz; k2 = alfa^2 + beta^2; izd = IF iz>=0 THEN iz ELSE nzd+iz
	hp_first=0; slice_hp=0; pres_first=0

	DO slice_hp(iy) = hp(ix,iz,iy) FOR iy=miny TO maxy
	IF NOT first THEN
        	READ BINARY FROM prev hp_first; FLUSH prev
	        hp_first = ~ + slice_hp
	ELSE
        	hp_first = slice_hp
	END IF
	IF NOT last THEN WRITE BINARY TO next hp_first; FLUSH next
	IF NOT last  THEN READ BINARY FROM next hp_first; FLUSH next
	IF NOT first THEN WRITE BINARY TO prev hp_first; FLUSH prev


	IF last THEN pres_up = calcpnv(ix,iz,vuyn(ix,izd),vwyn(ix,izd)); 
	IF NOT last  THEN READ BINARY FROM next pres_up; FLUSH next
	IF NOT first THEN WRITE BINARY TO prev pres_up; FLUSH prev


	IF first THEN
		pres_down = calcp0v(ix,iz,vuy0(ix,izd),vwy0(ix,izd)) 
		solve_dirichelet(hp_first, pres_up, pres_down, k2, pres_first)
	END IF

	IF NOT first THEN READ BINARY FROM prev pres_first; FLUSH prev
	IF NOT last THEN WRITE BINARY TO next pres_first; FLUSH next

	DO _pressure_(ix,iz,iy) = pres_first(iy) FOR iy=nyl-2 TO nyh+2
REPEAT

END compute_pressure
