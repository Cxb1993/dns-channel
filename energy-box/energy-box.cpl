!USE rtchecks
gamma=0
outinterv=0
USE ../dnsdata
USE ../dnsdirect

STRING inputpath='Fields/Oscil-inphase/'

#define tke
#define enstr

SUBROUTINE fourier2physical(ARRAY(*,*) OF COMPLEX plane; POINTER TO ARRAY(*,*) OF COMPLEX planed)
  LOOP FOR ix = 0 TO nx
    planed(ix,0..nz)=plane(ix,0..nz)
    planed(ix,nzd+(-nz..-1))=plane(ix,-nz..-1)
    IFT(planed(ix,*))
  REPEAT LOOP
  DO RFT(planed(*,iz)) FOR ALL iz
END fourier2physical

SUBROUTINE deriv2(ARRAY(*) OF REAL f0,f2^)
IF first THEN
  f2(0)=SUM d240(i)*f0(1+i) FOR i=-2 TO 2
  f2(-1)=SUM d24m1(i)*f0(1+i) FOR i=-2 TO 2
END IF
IF last THEN  
  f2(ny)=SUM d24n(i)*f0(ny-1+i) FOR i=-2 TO 2
  f2(ny+1)=SUM d24np1(i)*f0(ny-1+i) FOR i=-2 TO 2
END IF
DO WITH derivatives(iy) f2(iy) = (SUM d2(i)*f0(iy+i) FOR i=-2 TO 2) FOR iy=nyl TO nyh
IF first THEN
  WITH derivatives(1): f2(1)=~-(d0(-1)*f2(0)+d0(-2)*f2(-1))
  WITH derivatives(2): f2(2)=~-d0(-2)*f2(0)
END IF
IF last THEN  
  WITH derivatives(ny-1): f2(ny-1)=~-(d0(1)*f2(ny)+d0(2)*f2(ny+1))
  WITH derivatives(ny-2): f2(ny-2)=~-d0(2)*f2(ny)
END IF
LeftLUDivStep1(f2,D0mat,f2)
END deriv2

! DEFINITIONS
INTEGER nfmin,nfmax,nperiod
ASK nfmin,nfmax,nperiod
nftot=nfmax-nfmin+1

MEANTERMS = STRUCTURE(REAL U,W,dUdy,dWdy,ddUdy,ddWdy,dissU,dissW)
DERIVS = STRUCTURE(COMPLEX ux,uy,uz,vx,vy,vz,wx,wy,wz)

#ifdef tke
TKETERMS = STRUCTURE(REAL uu,vv,ww,uv,uw,vw,prod_uv,prod_vw,pdiss,phi_diff,diff,phi_conv,conv,phi_pres,pres)
DERPRODS = STRUCTURE(COMPLEX ux2,vx2,wx2,uy2,vy2,wy2,uz2,vz2,wz2)

ARRAY(nyl-2..nyh+2) OF TKETERMS phase_tkedata=0, tkedata=0
ARRAY(0..nxd-1,0..nzd-1) OF DERPRODS VVderd=0
ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF COMPLEX pressure=0
ARRAY(0..nxd-1,0..nzd-1) OF COMPLEX turbtrans=0
USE poisson_solver_parallel
#endif

#ifdef enstr
ENSTROPHYTERMS = STRUCTURE(REAL two,three,four,five,six,seven,eight,nine,ten,eleven,enstrophy,phi_nine,corr_two,corr_three,corr_four,corr_five,corr_six,corr_seven, corr_two_wyuz,corr_two_wywx,corr_two_vzuz,corr_two_vzwx,corr_three_vxuz,corr_three_vxwx,corr_three_uyuz,corr_three_uywx)
VORTICITY = STRUCTURE(COMPLEX ox,oy,oz)
VORPRODS = STRUCTURE(COMPLEX oxox,oyoy,ozoz)
VORDERIVS = STRUCTURE(COMPLEX oxx,oxy,oxz,oyx,oyy,oyz,ozx,ozy,ozz)
VORDERPRODS = STRUCTURE(COMPLEX oxx2,oxy2,oxz2,oyx2,oyy2,oyz2,ozx2,ozy2,ozz2)
VORVORVDER = STRUCTURE(COMPLEX oxoxux,oxoyuy,oxozuz,oyoxvx,oyoyvy,oyozvz,ozoxwx,ozoywy,ozozwz)
CORRELATION = STRUCTURE(COMPLEX wyuz,wywx,vzuz,vzwx,vxuz,vxwx,uyuz,uywx)

ARRAY(nyl-2..nyh+2) OF ENSTROPHYTERMS phase_enstrophydata=0, enstrophydata=0
ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF VORTICITY omega=0
ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF VORDERIVS omegader=0
ARRAY(0..nxd-1,0..nzd-1) OF VORTICITY omegad=0
ARRAY(0..nxd-1,0..nzd-1) OF VORPRODS omegacorrd=0
ARRAY(0..nxd-1,0..nzd-1) OF VORDERIVS omegaderd=0
ARRAY(0..nxd-1,0..nzd-1) OF VORDERPRODS omegadercorrd=0
ARRAY(0..nxd-1,0..nzd-1) OF VORVORVDER oiojVijd=0
ARRAY(0..nxd-1,0..nzd-1) OF CORRELATION corrd=0
ARRAY(0..nxd-1,0..nzd-1) OF COMPLEX voxoxd=0, voyoyd=0, vozozd=0, oxwxd=0, oywyd=0, ozwzd=0, oxuxd=0, oyuyd=0, ozuzd=0, voxd=0, vozd=0;
#endif

ARRAY(nyl-2..nyh+2) OF MEANTERMS phase_meandata=0, meandata=0
ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF DERIVS Vder=0
ARRAY(0..nxd-1,0..nzd-1) OF DERIVS Vderd=0

! TIME LOOP
LOOP files FOR ninstant=nfmin TO nfmax
  LOOP FOR k=1 TO nperiod
    n = [[k - 1] * nftot + ninstant]
    STRING field_name = WRITE(inputpath'Field'n'.fld')
    diskfield=OPEN(field_name)
    WITH diskfield:
	V(0,0,*).u.REAL=uavimage(nyl-2..nyh+2)
        V(0,0,*).w.REAL=wavimage(nyl-2..nyh+2)
    CLOSE diskfield
    DO phase_meandata(iy).U=~+V(0,0,iy).u.REAL FOR iy = nyl-2 TO nyh+2
    DO phase_meandata(iy).W=~+V(0,0,iy).w.REAL FOR iy = nyl-2 TO nyh+2
  REPEAT

  ! PHASE AVERAGE
  phase_meandata.U=~/nperiod; phase_meandata.W=~/nperiod

  LOOP FOR k=1 TO nperiod
    n = [[k - 1] * nftot + ninstant]
    STRING field_name = WRITE(inputpath'Field'n'.fld')
    WRITE "Reading field_file",field_name
    diskfield=OPEN(field_name)
    WITH diskfield
      LOOP FOR iy = nyl-2 TO nyh+2
        DO V(ix,*,iy).v=fieldimage(iy,ix,*).v; V(ix,*,iy).u=fieldimage(iy,ix,*).eta FOR ALL ix
      REPEAT LOOP
      V(0,0,*).u.REAL=uavimage(nyl-2..nyh+2)
      V(0,0,*).w.REAL=wavimage(nyl-2..nyh+2)
    CLOSE diskfield
    vetaTOuvw

    ! DEFINITION OF FLUCTUATING FIELD
    V(0,0,*).u.REAL=~-phase_meandata(*).U
    V(0,0,*).w.REAL=~-phase_meandata(*).W

    ! DERIVATIVES OF THE VELOCITY FIELD
    LOOP FOR ALL ix
      ialfa = I*alfa0*ix
      LOOP FOR ALL iz WITH Vder(ix,iz,*), V(ix,iz,*)
        ibeta = I*beta0*iz
        ux(*)=ialfa*u(*); vx(*)=ialfa*v(*); wx(*)=ialfa*w(*)
        uz(*)=ibeta*u(*); vz(*)=ibeta*v(*); wz(*)=ibeta*w(*)
        deriv(u(*).REAL,uy.REAL); deriv(u(*).IMAG,uy.IMAG)
        deriv(v(*).REAL,vy.REAL); deriv(v(*).IMAG,vy.IMAG)
        deriv(w(*).REAL,wy.REAL); deriv(w(*).IMAG,wy.IMAG)
        LeftLUDivStep2(uy.REAL,D0mat); LeftLUDivStep2(uy.IMAG,D0mat)
        LeftLUDivStep2(vy.REAL,D0mat); LeftLUDivStep2(vy.IMAG,D0mat)
        LeftLUDivStep2(wy.REAL,D0mat); LeftLUDivStep2(wy.IMAG,D0mat)
      REPEAT
      FlushStep2
    REPEAT
WRITE 'check derivatives'

    #ifdef tke
    ! PRESSURE FIELD
    compute_pressure(Vder,pressure)
WRITE 'check pressure'

    ! PARSEVAL THEOREM METHOD FOR RMS AND PRESSURE TRANSPORT
    LOOP FOR iy=nyl-2 TO nyh+2 WITH phase_tkedata(iy)
      LOOP FOR ALL iz 
        uu = ~ + (V(0,iz,iy).u | (V(0,iz,iy).u)).REAL
        vv = ~ + (V(0,iz,iy).v | (V(0,iz,iy).v)).REAL
        ww = ~ + (V(0,iz,iy).w | (V(0,iz,iy).w)).REAL
        uv = ~ + (V(0,iz,iy).u | (V(0,iz,iy).v)).REAL
        uw = ~ + (V(0,iz,iy).u | (V(0,iz,iy).w)).REAL
        vw = ~ + (V(0,iz,iy).v | (V(0,iz,iy).w)).REAL
        phi_pres = ~ + (V(0,iz,iy).v | (pressure(0,iz,iy))).REAL
      REPEAT
      LOOP FOR ALL iz AND ix = 1 TO nx
        uu = ~ + 2 * (V(ix,iz,iy).u | (V(ix,iz,iy).u)).REAL
        vv = ~ + 2 * (V(ix,iz,iy).v | (V(ix,iz,iy).v)).REAL
        ww = ~ + 2 * (V(ix,iz,iy).w | (V(ix,iz,iy).w)).REAL
        uv = ~ + 2 * (V(ix,iz,iy).u | (V(ix,iz,iy).v)).REAL
        uw = ~ + 2 * (V(ix,iz,iy).u | (V(ix,iz,iy).w)).REAL
        vw = ~ + 2 * (V(ix,iz,iy).v | (V(ix,iz,iy).w)).REAL
        phi_pres = ~ + 2 * (V(ix,iz,iy).v | (pressure(ix,iz,iy))).REAL
      REPEAT
    REPEAT

    ! PSEUDO-SPECTRAL METHOD FOR PSEUDO-DISSIPATION AND TURBULENT TRANSPORT
    LOOP FOR iy=nyl-2 TO nyh+2
      Vderd=0;Vd=0
      WITH Vder(*,*,iy), V(*,*,iy): 
        fourier2physical(ux,Vderd(*,*).ux); fourier2physical(uy,Vderd(*,*).uy); fourier2physical(uz,Vderd(*,*).uz);
        fourier2physical(vx,Vderd(*,*).vx); fourier2physical(vy,Vderd(*,*).vy); fourier2physical(vz,Vderd(*,*).vz);
        fourier2physical(wx,Vderd(*,*).wx); fourier2physical(wy,Vderd(*,*).wy); fourier2physical(wz,Vderd(*,*).wz);
        fourier2physical(u,Vd(*,*).u);      fourier2physical(v,Vd(*,*).v);      fourier2physical(w,Vd(*,*).w)
      DO WITH Vderd(ix,iz), VVderd(ix,iz), Vd(ix,iz):
        ux2.REAL=ux.REAL^2; ux2.IMAG=ux.IMAG^2
        uy2.REAL=uy.REAL^2; uy2.IMAG=uy.IMAG^2
        uz2.REAL=uz.REAL^2; uz2.IMAG=uz.IMAG^2
        vx2.REAL=vx.REAL^2; vx2.IMAG=vx.IMAG^2
        vy2.REAL=vy.REAL^2; vy2.IMAG=vy.IMAG^2
        vz2.REAL=vz.REAL^2; vz2.IMAG=vz.IMAG^2
        wx2.REAL=wx.REAL^2; wx2.IMAG=wx.IMAG^2
        wy2.REAL=wy.REAL^2; wy2.IMAG=wy.IMAG^2
        wz2.REAL=wz.REAL^2; wz2.IMAG=wz.IMAG^2
        turbtrans(ix,iz).REAL=v.REAL*[u.REAL^2+v.REAL^2+w.REAL^2]; turbtrans(ix,iz).IMAG=v.IMAG*[u.IMAG^2+v.IMAG^2+w.IMAG^2]
      FOR ALL ix,iz
      DO WITH VVderd(*,iz): HFT(ux2); HFT(vx2); HFT(wx2); HFT(uy2); HFT(vy2); HFT(wy2); HFT(uz2); HFT(vz2); HFT(wz2) FOR ALL iz
      DO HFT(turbtrans(*,iz)) FOR ALL iz
      DO WITH VVderd(ix,*): FFT(ux2); FFT(vx2); FFT(wx2); FFT(uy2); FFT(vy2); FFT(wy2); FFT(uz2); FFT(vz2); FFT(wz2) FOR ALL ix
      DO FFT(turbtrans(ix,*)) FOR ALL ix
      WITH VVderd(0,0), phase_tkedata(iy): pdiss=~+ni*REAL[ux2+uy2+uz2+vx2+vy2+vz2+wx2+wy2+wz2]; phi_conv=~+turbtrans(0,0).REAL    REPEAT LOOP
WRITE 'check rms and tke'
    #endif

    #ifdef enstr
    ! DEFINITION OF THE VORTICITY FIELD
    DO WITH Vder(ix,iz,*), omega(ix,iz,*): ox = wy - vz; oy = uz - wx; oz = vx - uy FOR ALL ix, iz

    ! DERIVATIVES OF THE VORTICITY FIELD
    LOOP FOR ALL ix
      ialfa = I*alfa0*ix; 
      LOOP FOR ALL iz WITH omegader(ix,iz,*),omega(ix,iz,*)
      ibeta = I*beta0*iz
        oxx=ialfa*ox; oyx=ialfa*oy; ozx=ialfa*oz
        oxz=ibeta*ox; oyz=ibeta*oy; ozz=ibeta*oz
        deriv(ox(*).REAL,oxy.REAL); deriv(ox(*).IMAG,oxy.IMAG)
        deriv(oy(*).REAL,oyy.REAL); deriv(oy(*).IMAG,oyy.IMAG)
        deriv(oz(*).REAL,ozy.REAL); deriv(oz(*).IMAG,ozy.IMAG)
        LeftLUDivStep2(oxy.REAL,D0mat); LeftLUDivStep2(oxy.IMAG,D0mat) 
        LeftLUDivStep2(oyy.REAL,D0mat); LeftLUDivStep2(oyy.IMAG,D0mat)
        LeftLUDivStep2(ozy.REAL,D0mat); LeftLUDivStep2(ozy.IMAG,D0mat)
      REPEAT
      FlushStep2
    REPEAT
WRITE 'check omega derivatives'

    ! PSEUDO-SPECTRAL METHOD TO CALCULATE CORRELATION TERMS
    LOOP FOR iy=nyl-2 TO nyh+2
      Vd=0; Vderd=0; omegad=0; omegaderd=0
      WITH Vder(*,*,iy), V(*,*,iy), omega(*,*,iy), omegader(*,*,iy): 
        fourier2physical(ux,Vderd(*,*).ux);       fourier2physical(uy,Vderd(*,*).uy);       fourier2physical(uz,Vderd(*,*).uz);
        fourier2physical(vx,Vderd(*,*).vx);       fourier2physical(vy,Vderd(*,*).vy);       fourier2physical(vz,Vderd(*,*).vz);
        fourier2physical(wx,Vderd(*,*).wx);       fourier2physical(wy,Vderd(*,*).wy);       fourier2physical(wz,Vderd(*,*).wz);
        fourier2physical(u,Vd(*,*).u);            fourier2physical(v,Vd(*,*).v);            fourier2physical(w,Vd(*,*).w);
        fourier2physical(ox,omegad(*,*).ox);      fourier2physical(oy,omegad(*,*).oy);      fourier2physical(oz,omegad(*,*).oz);
        fourier2physical(oxx,omegaderd(*,*).oxx); fourier2physical(oxy,omegaderd(*,*).oxy); fourier2physical(oxz,omegaderd(*,*).oxz);
        fourier2physical(oyx,omegaderd(*,*).oyx); fourier2physical(oyy,omegaderd(*,*).oyy); fourier2physical(oyz,omegaderd(*,*).oyz);
        fourier2physical(ozx,omegaderd(*,*).ozx); fourier2physical(ozy,omegaderd(*,*).ozy); fourier2physical(ozz,omegaderd(*,*).ozz)
      DO WITH Vd(ix,iz),Vderd(ix,iz),omegad(ix,iz),omegaderd(ix,iz),omegacorrd(ix,iz),omegadercorrd(ix,iz),oiojVijd(ix,iz),corrd(ix,iz)
        oxox.REAL=ox.REAL*ox.REAL; oxox.IMAG=ox.IMAG*ox.IMAG
        oyoy.REAL=oy.REAL*oy.REAL; oyoy.IMAG=oy.IMAG*oy.IMAG
        ozoz.REAL=oz.REAL*oz.REAL; ozoz.IMAG=oz.IMAG*oz.IMAG
        oxx2.REAL=oxx.REAL*oxx.REAL; oxx2.IMAG=oxx.IMAG*oxx.IMAG
        oxy2.REAL=oxy.REAL*oxy.REAL; oxy2.IMAG=oxy.IMAG*oxy.IMAG
        oxz2.REAL=oxz.REAL*oxz.REAL; oxz2.IMAG=oxz.IMAG*oxz.IMAG
        oyx2.REAL=oyx.REAL*oyx.REAL; oyx2.IMAG=oyx.IMAG*oyx.IMAG
        oyy2.REAL=oyy.REAL*oyy.REAL; oyy2.IMAG=oyy.IMAG*oyy.IMAG
        oyz2.REAL=oyz.REAL*oyz.REAL; oyz2.IMAG=oyz.IMAG*oyz.IMAG
        ozx2.REAL=ozx.REAL*ozx.REAL; ozx2.IMAG=ozx.IMAG*ozx.IMAG
        ozy2.REAL=ozy.REAL*ozy.REAL; ozy2.IMAG=ozy.IMAG*ozy.IMAG
        ozz2.REAL=ozz.REAL*ozz.REAL; ozz2.IMAG=ozz.IMAG*ozz.IMAG
        voxoxd(ix,iz).REAL=v.REAL*ox.REAL*ox.REAL; voxoxd(ix,iz).IMAG=v.IMAG*ox.IMAG*ox.IMAG
        voyoyd(ix,iz).REAL=v.REAL*oy.REAL*oy.REAL; voyoyd(ix,iz).IMAG=v.IMAG*oy.IMAG*oy.IMAG
        vozozd(ix,iz).REAL=v.REAL*oz.REAL*oz.REAL; vozozd(ix,iz).IMAG=v.IMAG*oz.IMAG*oz.IMAG
        oxuxd(ix,iz).REAL=ox.REAL*ux.REAL; oxuxd(ix,iz).IMAG=ox.IMAG*ux.IMAG
        oyuyd(ix,iz).REAL=oy.REAL*uy.REAL; oyuyd(ix,iz).IMAG=oy.IMAG*uy.IMAG
        ozuzd(ix,iz).REAL=oz.REAL*uz.REAL; ozuzd(ix,iz).IMAG=oz.IMAG*uz.IMAG
        oxwxd(ix,iz).REAL=ox.REAL*wx.REAL; oxwxd(ix,iz).IMAG=ox.IMAG*wx.IMAG
        oywyd(ix,iz).REAL=oy.REAL*wy.REAL; oywyd(ix,iz).IMAG=oy.IMAG*wy.IMAG
        ozwzd(ix,iz).REAL=oz.REAL*wz.REAL; ozwzd(ix,iz).IMAG=oz.IMAG*wz.IMAG
        voxd(ix,iz).REAL=v.REAL*ox.REAL; voxd(ix,iz).IMAG=v.IMAG*ox.IMAG
        vozd(ix,iz).REAL=v.REAL*oz.REAL; vozd(ix,iz).IMAG=v.IMAG*oz.IMAG
        oxoxux.REAL=ox.REAL*ox.REAL*ux.REAL; oxoxux.IMAG=ox.IMAG*ox.IMAG*ux.IMAG
        oxoyuy.REAL=ox.REAL*oy.REAL*uy.REAL; oxoyuy.IMAG=ox.IMAG*oy.IMAG*uy.IMAG
        oxozuz.REAL=ox.REAL*oz.REAL*uz.REAL; oxozuz.IMAG=ox.IMAG*oz.IMAG*uz.IMAG
        oyoxvx.REAL=oy.REAL*ox.REAL*vx.REAL; oyoxvx.IMAG=oy.IMAG*ox.IMAG*vx.IMAG
        oyoyvy.REAL=oy.REAL*oy.REAL*vy.REAL; oyoyvy.IMAG=oy.IMAG*oy.IMAG*vy.IMAG
        oyozvz.REAL=oy.REAL*oz.REAL*vz.REAL; oyozvz.IMAG=oy.IMAG*oz.IMAG*vz.IMAG
        ozoxwx.REAL=oz.REAL*ox.REAL*wx.REAL; ozoxwx.IMAG=oz.IMAG*ox.IMAG*wx.IMAG
        ozoywy.REAL=oz.REAL*oy.REAL*wy.REAL; ozoywy.IMAG=oz.IMAG*oy.IMAG*wy.IMAG
        ozozwz.REAL=oz.REAL*oz.REAL*wz.REAL; ozozwz.IMAG=oz.IMAG*oz.IMAG*wz.IMAG  
        wyuz.REAL=wy.REAL*uz.REAL; wyuz.IMAG=wy.IMAG*uz.IMAG
        wywx.REAL=wy.REAL*wx.REAL; wywx.IMAG=wy.IMAG*wx.IMAG
        vzuz.REAL=vz.REAL*uz.REAL; vzuz.IMAG=vz.IMAG*uz.IMAG
        vzwx.REAL=vz.REAL*wx.REAL; vzwx.IMAG=vz.IMAG*wx.IMAG
        vxuz.REAL=vx.REAL*uz.REAL; vxuz.IMAG=vx.IMAG*uz.IMAG
        vxwx.REAL=vx.REAL*wx.REAL; vxwx.IMAG=vx.IMAG*wx.IMAG
        uyuz.REAL=uy.REAL*uz.REAL; uyuz.IMAG=uy.IMAG*uz.IMAG
        uywx.REAL=uy.REAL*wx.REAL; uywx.IMAG=uy.IMAG*wx.IMAG
      FOR ALL ix,iz
      DO WITH omegacorrd(*,iz): HFT(oxox); HFT(oyoy); HFT(ozoz) FOR ALL iz
      DO WITH omegadercorrd(*,iz): HFT(oxx2); HFT(oxy2); HFT(oxz2); HFT(oyx2); HFT(oyy2); HFT(oyz2); HFT(ozx2); HFT(ozy2); HFT(ozz2) FOR ALL iz
      DO HFT(voxoxd(*,iz)); HFT(voyoyd(*,iz)); HFT(vozozd(*,iz)) FOR ALL iz
      DO HFT(oxuxd(*,iz)); HFT(oyuyd(*,iz)); HFT(ozuzd(*,iz)); HFT(oxwxd(*,iz)); HFT(oywyd(*,iz)); HFT(ozwzd(*,iz)) FOR ALL iz
      DO HFT(voxd(*,iz)); HFT(vozd(*,iz)) FOR ALL iz
      DO WITH oiojVijd(*,iz): HFT(oxoxux); HFT(oxoyuy); HFT(oxozuz); HFT(oyoxvx); HFT(oyoyvy); HFT(oyozvz); HFT(ozoxwx); HFT(ozoywy); HFT(ozozwz) FOR ALL iz
      DO WITH corrd(*,iz): HFT(wyuz); HFT(wywx); HFT(vzuz); HFT(vzwx); HFT(vxuz); HFT(vxwx); HFT(uyuz); HFT(uywx) FOR ALL iz
      DO WITH omegacorrd(ix,*): FFT(oxox); FFT(oyoy); FFT(ozoz) FOR ALL ix
      DO WITH omegadercorrd(ix,*): FFT(oxx2); FFT(oxy2); FFT(oxz2); FFT(oyx2); FFT(oyy2); FFT(oyz2); FFT(ozx2); FFT(ozy2); FFT(ozz2) FOR ALL ix
      DO FFT(voxoxd(ix,*)); FFT(voyoyd(ix,*)); FFT(vozozd(ix,*)) FOR ALL ix
      DO FFT(oxuxd(ix,*)); FFT(oyuyd(ix,*)); FFT(ozuzd(ix,*)); FFT(oxwxd(ix,*)); FFT(oywyd(ix,*)); FFT(ozwzd(ix,*)) FOR ALL ix
      DO FFT(voxd(ix,*)); FFT(vozd(ix,*)) FOR ALL ix
      DO WITH oiojVijd(ix,*): FFT(oxoxux); FFT(oxoyuy); FFT(oxozuz); FFT(oyoxvx); FFT(oyoyvy); FFT(oyozvz); FFT(ozoxwx); FFT(ozoywy); FFT(ozozwz) FOR ALL ix
      DO WITH corrd(ix,*): FFT(wyuz); FFT(wywx); FFT(vzuz); FFT(vzwx); FFT(vxuz); FFT(vxwx); FFT(uyuz); FFT(uywx) FOR ALL ix
      WITH omegacorrd(0,0), phase_enstrophydata(iy): enstrophy=~+REAL[oxox+oyoy+ozoz]
      WITH omegadercorrd(0,0), phase_enstrophydata(iy): eleven=~+(-1)*ni*REAL[oxx2+oxy2+oxz2+oyx2+oyy2+oyz2+ozx2+ozy2+ozz2]
      WITH corrd(0,0), phase_enstrophydata(iy): corr_two=~+REAL[wyuz-wywx-vzuz+vzwx]; corr_three=~+REAL[vxuz-vxwx-uyuz+uywx]
      WITH corrd(0,0), phase_enstrophydata(iy): corr_two_wyuz=~+wyuz.REAL; corr_two_wywx=~+(-1)*wywx.REAL; corr_two_vzuz=~+(-1)*vzuz.REAL; corr_two_vzwx=~+vzwx.REAL
      WITH corrd(0,0), phase_enstrophydata(iy): corr_three_vxuz=~+vxuz.REAL; corr_three_vxwx=~+(-1)*vxwx.REAL; corr_three_uyuz=~+(-1)*uyuz.REAL; corr_three_uywx=~+uywx.REAL
      WITH oiojVijd(0,0), phase_enstrophydata(iy): eight=~+REAL[oxoxux+oxoyuy+oxozuz+oyoxvx+oyoyvy+oyozvz+ozoxwx+ozoywy+ozozwz]
      WITH phase_enstrophydata(iy): phi_nine=~+REAL[voxoxd(0,0)+voyoyd(0,0)+vozozd(0,0)]
      WITH phase_enstrophydata(iy): corr_four=~+REAL[oxuxd(0,0)+oyuyd(0,0)+ozuzd(0,0)]
      WITH phase_enstrophydata(iy): corr_five=~+REAL[oxwxd(0,0)+oywyd(0,0)+ozwzd(0,0)]
      WITH phase_enstrophydata(iy): corr_six=~+voxd(0,0).REAL; corr_seven=~+vozd(0,0).REAL
    REPEAT
WRITE 'check enstrophy'
    #endif

  REPEAT

  ! MEAN (x-z-phase) DERIVATIVES AND DISSIPATIONS FOR EACH PHASE
  WITH phase_meandata: deriv(U, dUdy); LeftLUDivStep2(dUdy, D0mat)
  DO WITH phase_meandata(iy): dissU = ni * dUdy^2 FOR iy = nyl-2 TO nyh+2
  WITH phase_meandata: deriv(W, dWdy); LeftLUDivStep2(dWdy, D0mat)
  DO WITH phase_meandata(iy): dissW = ni * dWdy^2 FOR iy = nyl-2 TO nyh+2
  WITH phase_meandata: deriv2(U, ddUdy); LeftLUDivStep2(ddUdy, D0mat)
  WITH phase_meandata: deriv2(W, ddWdy); LeftLUDivStep2(ddWdy, D0mat)

  #ifdef tke
  ! PHASE AVERAGE
  WITH phase_tkedata: uu=~/nperiod; vv=~/nperiod; ww=~/nperiod; uv=~/nperiod; uw=~/nperiod; vw=~/nperiod; phi_pres=~/nperiod; pdiss=~/nperiod; phi_conv=~/nperiod

  ! VISCOUS DIFFUSION
  WITH phase_tkedata: deriv(0.5*(uu + vv + ww),phi_diff); LeftLUDivStep2(phi_diff,D0mat)
  WITH phase_tkedata: deriv(phi_diff,diff); LeftLUDivStep2(diff,D0mat)
  DO WITH phase_tkedata(iy): diff = ni * diff FOR iy = nyl-2 TO nyh+2

  ! TURBULENT CONVECTION
  WITH phase_tkedata: deriv(phi_conv,conv); LeftLUDivStep2(conv,D0mat); conv=-0.5*conv

  ! PRESSURE TRANSPORT
  WITH phase_tkedata: deriv(phi_pres,pres); LeftLUDivStep2(pres,D0mat); pres=-pres

  ! TURBULENT PRODUCTION
  DO WITH phase_tkedata(iy), phase_meandata(iy): prod_uv = -uv*dUdy; prod_vw = -vw*dWdy FOR iy = nyl-2 TO nyh+2

  ! RMS AND TKE TERMS --- TIME INTEGRATION
  DO WITH tkedata(iy):
    uu=~+phase_tkedata(iy).uu
    vv=~+phase_tkedata(iy).vv
    ww=~+phase_tkedata(iy).ww
    uv=~+phase_tkedata(iy).uv
    uw=~+phase_tkedata(iy).uw
    vw=~+phase_tkedata(iy).vw
    prod_uv=~+phase_tkedata(iy).prod_uv
    prod_vw=~+phase_tkedata(iy).prod_vw
    pdiss=~+phase_tkedata(iy).pdiss
    diff=~+phase_tkedata(iy).diff
    conv=~+phase_tkedata(iy).conv
    pres=~+phase_tkedata(iy).pres
  FOR iy = nyl-2 TO nyh+2
  #endif

  #ifdef enstr
  ! PHASE AVERAGE
  WITH phase_enstrophydata: enstrophy=~/nperiod; eleven=~/nperiod; corr_two=~/nperiod; corr_two_wyuz=~/nperiod; corr_two_wywx=~/nperiod; corr_two_vzuz=~/nperiod; corr_two_vzwx=~/nperiod; corr_three=~/nperiod; corr_three_vxuz=~/nperiod; corr_three_vxwx=~/nperiod; corr_three_uyuz=~/nperiod; corr_three_uywx=~/nperiod; eight=~/nperiod; phi_nine=~/nperiod; corr_four=~/nperiod; corr_five=~/nperiod; corr_six=~/nperiod; corr_seven=~/nperiod

  ! TRANSPORT OF ENSTROPHY
  WITH phase_enstrophydata: deriv(phi_nine, nine); LeftLUDivStep2(nine, D0mat); nine=-0.5*nine

  ! VISCOUS DIFFUSION OF ENSTROPHY (OR VISCOUS TRANSPORT)
  WITH phase_enstrophydata: deriv2(enstrophy, ten); LeftLUDivStep2(ten, D0mat)
  DO WITH phase_enstrophydata(iy): ten = 0.5 * ni * ten FOR iy = nyl-2 TO nyh+2

  ! ENSTROPHY TERMS REMAINING (TERMS: TWO, THREE, FOUR, FIVE, SIX, SEVEN)
  DO WITH phase_enstrophydata(iy), phase_meandata(iy): two=corr_two*dUdy; three=corr_three*dWdy; four=corr_four*dWdy; five=(-1)*corr_five*dUdy; six=(-1)*corr_six*ddWdy; seven=corr_seven*ddUdy FOR iy = nyl-2 TO nyh+2

  ! ENSTROPHY BUDGET TERMS AND CORRELATIONS --- TIME INTEGRATION
  DO WITH enstrophydata(iy):
    two=~+phase_enstrophydata(iy).two
    three=~+phase_enstrophydata(iy).three
    four=~+phase_enstrophydata(iy).four
    five=~+phase_enstrophydata(iy).five
    six=~+phase_enstrophydata(iy).six
    seven=~+phase_enstrophydata(iy).seven
    eight=~+phase_enstrophydata(iy).eight
    nine=~+phase_enstrophydata(iy).nine
    ten=~+phase_enstrophydata(iy).ten
    eleven=~+phase_enstrophydata(iy).eleven
    enstrophy=~+phase_enstrophydata(iy).enstrophy
    corr_two=~+phase_enstrophydata(iy).corr_two; corr_three=~+phase_enstrophydata(iy).corr_three
    corr_two_wyuz=~+phase_enstrophydata(iy).corr_two_wyuz; corr_two_wywx=~+phase_enstrophydata(iy).corr_two_wywx
    corr_two_vzuz=~+phase_enstrophydata(iy).corr_two_vzuz; corr_two_vzwx=~+phase_enstrophydata(iy).corr_two_vzwx
    corr_three_vxuz=~+phase_enstrophydata(iy).corr_three_vxuz; corr_three_vxwx=~+phase_enstrophydata(iy).corr_three_vxwx
    corr_three_uyuz=~+phase_enstrophydata(iy).corr_three_uyuz; corr_three_uywx=~+phase_enstrophydata(iy).corr_three_uywx
  FOR  iy = nyl-2 TO nyh+2
  #endif

  ! MEAN TERMS --- TIME INTEGRATION
  DO WITH meandata(iy):
    U=~+phase_meandata(iy).U; W=~+phase_meandata(iy).W
    dUdy=~+phase_meandata(iy).dUdy; dWdy=~+phase_meandata(iy).dWdy
    ddUdy=~+phase_meandata(iy).ddUdy; ddWdy=~+phase_meandata(iy).ddWdy
    dissU=~+phase_meandata(iy).dissU; dissW=~+phase_meandata(iy).dissW
  FOR iy = nyl-2 TO nyh+2

  ! STATISTICS SAVING AT EACH PHASE
  POINTER TO STORED STRUCTURE[
    ARRAY(-1..ny+1) OF MEANTERMS phase_meandataimage
    ARRAY(-1..ny+1) OF REAL yimage
  ] phase_meanimage
  IF NOT first THEN READ FROM prev
    phase_meanimage = OPEN('mean.ph'ninstant'.dat.bin')
    WITH phase_meanimage:
    DO phase_meandataimage(iy) = phase_meandata(iy) FOR iy = miny TO maxy
    DO yimage(iy) = y(iy) FOR iy = miny TO maxy
  CLOSE phase_meanimage
  IF NOT last THEN WRITE TO next
  phase_meandata=0

  #ifdef tke
  POINTER TO STORED STRUCTURE[
    ARRAY(-1..ny+1) OF TKETERMS phase_tkedataimage
    ARRAY(-1..ny+1) OF REAL yimage
  ] phase_tkeimage
  IF NOT first THEN READ FROM prev
    phase_tkeimage = OPEN('tke.ph'ninstant'.dat.bin')
    WITH phase_tkeimage:
    DO phase_tkedataimage(iy) = phase_tkedata(iy) FOR iy = miny TO maxy
    DO yimage(iy) = y(iy) FOR iy = miny TO maxy
  CLOSE phase_tkeimage
  IF NOT last THEN WRITE TO next
  phase_tkedata=0
  #endif

  #ifdef enstr
  POINTER TO STORED STRUCTURE[
    ARRAY(-1..ny+1) OF ENSTROPHYTERMS phase_enstrophydataimage
    ARRAY(-1..ny+1) OF REAL yimage
  ] phase_enstrophyimage
  IF NOT first THEN READ FROM prev
    phase_enstrophyimage = OPEN('enstr.ph'ninstant'.dat.bin')
    WITH phase_enstrophyimage:
    DO phase_enstrophydataimage(iy) = phase_enstrophydata(iy) FOR iy = miny TO maxy
    DO yimage(iy) = y(iy) FOR iy = miny TO maxy
  CLOSE phase_enstrophyimage
  IF NOT last THEN WRITE TO next
  phase_enstrophydata=0
  #endif

REPEAT files

! TIME AVERAGE
WITH meandata: U=~/nftot; W=~/nftot; dUdy=~/nftot; dWdy=~/nftot; ddUdy=~/nftot; ddWdy=~/nftot; dissU=~/nftot; dissW=~/nftot

! STATISTICS SAVING
POINTER TO STORED STRUCTURE[
  ARRAY(-1..ny+1) OF MEANTERMS meandataimage
  ARRAY(-1..ny+1) OF REAL yimage
] meanimage
IF NOT first THEN READ FROM prev
  meanimage = OPEN('mean.dat.bin')
  WITH meanimage:
  DO meandataimage(iy) = meandata(iy) FOR iy = miny TO maxy
  DO yimage(iy) = y(iy) FOR iy = miny TO maxy
CLOSE meanimage
IF NOT last THEN WRITE TO next

#ifdef tke
! TIME AVERAGE
WITH tkedata: uu=~/nftot; vv=~/nftot; ww=~/nftot; uv=~/nftot; uw=~/nftot; vw=~/nftot; prod_uv=~/nftot; prod_vw=~/nftot; pdiss=~/nftot; diff=~/nftot; conv=~/nftot; pres=~/nftot

! STATISTICS SAVING
POINTER TO STORED STRUCTURE[
  ARRAY(-1..ny+1) OF TKETERMS tkedataimage
  ARRAY(-1..ny+1) OF REAL yimage
] tkeimage
IF NOT first THEN READ FROM prev
  tkeimage = OPEN('tke.dat.bin')
  WITH tkeimage:
  DO tkedataimage(iy) = tkedata(iy) FOR iy = miny TO maxy
  DO yimage(iy) = y(iy) FOR iy = miny TO maxy
CLOSE tkeimage
IF NOT last THEN WRITE TO next
#endif

#ifdef enstr
! TIME AVERAGE
WITH enstrophydata: two=~/nftot; three=~/nftot; four=~/nftot; five=~/nftot; six=~/nftot; seven=~/nftot; eight=~/nftot; nine=~/nftot; ten=~/nftot; eleven=~/nftot; enstrophy=~/nftot; corr_two=~/nftot; corr_three=~/nftot; corr_two_wyuz=~/nftot; corr_two_wywx=~/nftot; corr_two_vzuz=~/nftot; corr_two_vzwx=~/nftot; corr_three_vxuz=~/nftot; corr_three_vxwx=~/nftot; corr_three_uyuz=~/nftot; corr_three_uywx=~/nftot

! STATISTICS SAVING
POINTER TO STORED STRUCTURE[
  ARRAY(-1..ny+1) OF ENSTROPHYTERMS enstrophydataimage
  ARRAY(-1..ny+1) OF REAL yimage
] enstrophyimage
IF NOT first THEN READ FROM prev
  enstrophyimage = OPEN('enstr.dat.bin')
  WITH enstrophyimage:
  DO enstrophydataimage(iy) = enstrophydata(iy) FOR iy = miny TO maxy
  DO yimage(iy) = y(iy) FOR iy = miny TO maxy
CLOSE enstrophyimage
IF NOT last THEN WRITE TO next
#endif

