! This program computes the MKE and TKE budgets
! and their volume integrals for a channel flow
! with spanwise wall oscillations

!
! mean TKE buget according to equation:
!
! INST    --> dK/dt
! CONV    --> Ui*dK/dxi
! PROD    --> -<uiuj>dUj/dxi
! DISS*   --> nu<(duj/dxi + dui/dxj)*duj/dxi>
! TDIFF   --> -0.5*d/dxi<ui*uj*uj>
! PDIFF   --> -d/dxi<ui*p>
! VDIFF1  --> nu*d2K/dxi2
! VDIFF2* --> nu*d2/dxjdxi<ui*uj>
!
! *-terms can be summed into the PDISS=nu*<duj/dxi*duj/dxi>
!
! which in a statistically stationary and fully-developed turbulent
! channel flow with spanwise wall oscillations reduces to
!
! PROD  --> -<uv>dU/dy-<vw>dW/dy         [this is computed after the fields loop]
! PDISS --> nu*<dui/dxj*dui/dxj>
! TDIFF --> -0.5*d/dy(<vuu>+<vvv>+<vww>)
! PDIFF --> -d/dy<vp>
! VDIFF --> nu*d2K/dy2                   [this is computed after the fields loop]
!

!
! MKE buget equation, which in a statistically stationary
! and fully-developed turbulent channel flow
! with spanwise wall oscillations reduces to
!
! MPROD  --> -dP/dx*U = tau_w*U
! TPROD  --> <uv>dU/dy+<vw>dW/dy         [TKE production, here a sink]
! TMDIF  --> -d(<uv>U)/dy-d(<vw>W)/dy
! MMDIF  --> ni*d(U*Uy)/dy+d(W*Wy)/dy
! DISSu  --> ni*dUdy^2
! DISSw  --> ni*dWdy^2
!
! all these terms are computed after the fields loop.

! This code is NOT parallel

gamma=0
outinterv=10
USE ../dnsdata
USE ../dnsdirect
!USE rtchecks
USE convenience

! Parameters
! -----------------------------
nfmin=1; nfmax=1; dn=1
!------------------------------
nftot=[(nfmax-nfmin) DIV dn]+1

! Definitions
! ------------------------------------
MEANTERMS = STRUCTURE(REAL U,W,Uy,Wy,Uyy,Wyy)
RMS = STRUCTURE(REAL uu,vv,ww,uv,uw,vw)
TKETERMS = STRUCTURE(REAL PRuv,PRvw,PDISS,TDIFF,PDIFF,VDIFF,PHI_TDIFF,PHI_PDIFF,PHI_VDIFF)
MKETERMS = STRUCTURE(REAL MPROD,TPRuv,TPRvw,TMDIF,MMDIF,DISSu,DISSw,PHI_TMDIF,PHI_MMDIF)

SHARED ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF COMPLEX pressure=0
SHARED ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF DERIVS Vder=0

SHARED ARRAY(0..nxd-1,0..nzd-1) OF DERIVS Vderd=0
SHARED ARRAY(0..nxd-1,0..nzd-1) OF DERPRODS VVderd=0
SHARED ARRAY(0..nxd-1,0..nzd-1) OF COMPLEX PHI_TDIFFd=0

SHARED ARRAY(nyl-2..nyh+2) OF MEANTERMS meandata=0
SHARED ARRAY(nyl-2..nyh+2) OF RMS rmsdata=0
SHARED ARRAY(nyl-2..nyh+2) OF TKETERMS tkedata=0
SHARED ARRAY(nyl-2..nyh+2) OF MKETERMS mkedata=0

USE ../energy-box/poisson_solver_parallel

! Compute the average field
! ------------------------------------
LOOP files FOR n=nfmin TO nfmax BY dn
  IF NOT first THEN READ FROM prev
    STRING field_name = WRITE('Field'n'.fld')
    diskfield=OPEN(field_name)
    WITH diskfield,meandata(*):
      U=~+uavimage(nyl-2..nyh+2)
      W=~+wavimage(nyl-2..nyh+2)
    CLOSE diskfield
  IF NOT last THEN WRITE TO next
REPEAT files
WITH meandata: U=~/nftot; W=~/nftot

! Compute the TKE budget
! ------------------------------------
LOOP fields FOR n=nfmin TO nfmax BY dn
  ! Read field
  STRING field_name = WRITE('Field'n'.fld')
  read_field_parallel(field_name)
  ! Compute fluctuating field
  WITH meandata(*),V(0,0,*): u.REAL=~-U; w.REAL=~-W
  ! Pressure field
  compute_pressure(Vder,pressure)
  ! Parseval theorem method for RMS and PHI_PDIFF
  LOOP FOR iy=nyl-2 TO nyh+2 WITH rmsdata(iy),tkedata(iy):
    LOOP FOR iz=-nz TO nz WITH V(0,iz,iy):
      uu = ~ + (u|u).REAL; vv = ~ + (v|v).REAL; ww = ~ + (w|w).REAL
      uv = ~ + (u|v).REAL; uw = ~ + (u|w).REAL; vw = ~ + (v|w).REAL
      PHI_PDIFF = ~ + (v|pressure(0,iz,iy)).REAL
    REPEAT
    LOOP FOR ALL iz AND ix = 1 TO nx WITH V(ix,iz,iy):
      uu = ~ + 2 * (u|u).REAL; vv = ~ + 2 * (v|v).REAL; ww = ~ + 2 * (w|w).REAL
      uv = ~ + 2 * (u|v).REAL; uw = ~ + 2 * (u|w).REAL; vw = ~ + 2 * (v|w).REAL
      PHI_PDIFF = ~ + 2 * (v|pressure(ix,iz,iy)).REAL
    REPEAT
  REPEAT
  ! Pseudo-spectral method for PDISS and PHI_TDIFF
  PARALLEL LOOP FOR ismp=0 TO nsmp-1
  LOOP FOR iy=nyl-2 TO nyh+2
    LOOP FOR ix=ismp*(nx+1) DIV nsmp TO (ismp+1)*(nx+1) DIV nsmp -1
      Vderd(ix,0..nz)=Vder(ix,0..nz,iy); Vderd(ix,nz+1..nzd-nz-1)=0; Vderd(ix,nzd+(-nz..-1))=Vder(ix,-nz..-1,iy)
      Vd(ix,0..nz)=V(ix,0..nz,iy);       Vd(ix,nz+1..nzd-nz-1)=0;    Vd(ix,nzd+(-nz..-1))=V(ix,-nz..-1,iy)
      WITH Vderd(ix,*): INLINE LOOP FOR ii IN (ux,vx,wx,uy,vy,wy,uz,vz,wz); IFT(ii); REPEAT
      WITH Vd(ix,*):    INLINE LOOP FOR i  IN (u,v,w); IFT(i); REPEAT
    REPEAT LOOP
    IF ismp=0 THEN Vd(nx+1..nxd-1)=0; Vderd(nx+1..nxd-1)=0
    SYNC(ismp,nsmp)
    DO
      WITH Vderd(*,iz): INLINE LOOP FOR ii IN (ux,vx,wx,uy,vy,wy,uz,vz,wz); RFT(ii); REPEAT
      WITH Vd(*,iz):    INLINE LOOP FOR i  IN (u,v,w); RFT(i); REPEAT
      DO WITH Vderd(ix,iz), VVderd(ix,iz), Vd(ix,iz):
        ux2.REAL=ux.REAL^2; ux2.IMAG=ux.IMAG^2; uy2.REAL=uy.REAL^2; uy2.IMAG=uy.IMAG^2
        uz2.REAL=uz.REAL^2; uz2.IMAG=uz.IMAG^2; vx2.REAL=vx.REAL^2; vx2.IMAG=vx.IMAG^2
        vy2.REAL=vy.REAL^2; vy2.IMAG=vy.IMAG^2; vz2.REAL=vz.REAL^2; vz2.IMAG=vz.IMAG^2
        wx2.REAL=wx.REAL^2; wx2.IMAG=wx.IMAG^2; wy2.REAL=wy.REAL^2; wy2.IMAG=wy.IMAG^2
        wz2.REAL=wz.REAL^2; wz2.IMAG=wz.IMAG^2
        PHI_TDIFFd(ix,iz).REAL=v.REAL*[u.REAL^2+v.REAL^2+w.REAL^2]; PHI_TDIFFd(ix,iz).IMAG=v.IMAG*[u.IMAG^2+v.IMAG^2+w.IMAG^2]
      FOR ALL ix
      WITH VVderd(*,iz): INLINE LOOP FOR iii IN (ux2,uy2,uz2,vx2,vy2,vz2,wx2,wy2,wz2); HFT(iii); REPEAT
      HFT(PHI_TDIFFd(*,iz))
    FOR iz=ismp*(HI+1) DIV nsmp TO (ismp+1)*(HI+1) DIV nsmp -1
    SYNC(ismp,nsmp)
    DO WITH VVderd(ix,*):
      INLINE LOOP FOR iii IN (ux2,uy2,uz2,vx2,vy2,vz2,wx2,wy2,wz2); FFT(iii); REPEAT
      FFT(PHI_TDIFFd(ix,*))
    FOR ix=ismp*(nx+1) DIV nsmp TO (ismp+1)*(nx+1) DIV nsmp -1
    SYNC(ismp,nsmp)
    IF ismp=0 THEN WITH VVderd(0,0), tkedata(iy): PDISS=~+ni*REAL[ux2+uy2+uz2+vx2+vy2+vz2+wx2+wy2+wz2]; PHI_TDIFF=~+PHI_TDIFFd(0,0).REAL
  REPEAT LOOP
  REPEAT LOOP
REPEAT fields
! Mean derivatives (Uy,Wy,Uyy,Wyy)
WITH meandata: deriv(U, Uy);     LeftLUDivStep2(Uy, D0mat)
WITH meandata: deriv(W, Wy);     LeftLUDivStep2(Wy, D0mat)
WITH meandata: deriv2(U, Uyy);   LeftLUDivStep2(Uyy, D0mat)
WITH meandata: deriv2(W, Wyy);   LeftLUDivStep2(Wyy, D0mat)
! Average RMS, PHI_TDIFF, PHI_PDIFF and PDISS(TKE)
WITH tkedata,rmsdata: uu=~/nftot; vv=~/nftot; ww=~/nftot; uv=~/nftot; uw=~/nftot; vw=~/nftot; PHI_TDIFF=~/nftot; PHI_PDIFF=~/nftot; PDISS=~/nftot
! VDIFF(TKE)
WITH tkedata, rmsdata:  deriv(0.5*(uu + vv + ww),PHI_VDIFF); LeftLUDivStep2(PHI_VDIFF,D0mat);
WITH tkedata, rmsdata: deriv2(0.5*(uu + vv + ww),VDIFF);     LeftLUDivStep2(VDIFF,D0mat);     VDIFF=~*ni
! TDIFF(TKE)
WITH tkedata: deriv(PHI_TDIFF,TDIFF); LeftLUDivStep2(TDIFF,D0mat); TDIFF=-0.5*~
! PDIFF(TKE)
WITH tkedata: deriv(PHI_PDIFF,PDIFF); LeftLUDivStep2(PDIFF,D0mat); PDIFF=-~
! PROD(TKE) and TPROD(MKE)
DO WITH rmsdata(iy), meandata(iy), tkedata(iy), mkedata(iy): PRuv=-uv*Uy; PRvw=-vw*Wy; TPRuv=-PRuv; TPRvw=-PRvw FOR ALL iy
! DISSu(MKE) and DISSw(MKE)
DO WITH meandata(iy), mkedata(iy): DISSu=ni*Uy^2; DISSw=ni*Wy^2 FOR ALL iy
! TMDIF(MKE)
DO WITH meandata(iy), rmsdata(iy), mkedata(iy): PHI_TMDIF=-uv*U-vw*W FOR ALL iy
WITH mkedata: deriv(PHI_TMDIF,TMDIF);  LeftLUDivStep2(TMDIF,D0mat);
! MMDIF(MKE)
DO WITH meandata(iy), mkedata(iy): PHI_MMDIF=U*Uy+W*Wy FOR ALL iy
WITH mkedata: deriv(PHI_MMDIF,MMDIF);  LeftLUDivStep2(MMDIF,D0mat);  MMDIF=~*ni
! MPROD(MKE)
REAL Uy0,Uym
IF first THEN WITH meandata: Uy0=Uy(0)
IF NOT first THEN READ FROM prev Uy0
IF NOT last  THEN WRITE TO next Uy0
IF last  THEN WITH meandata: Uym=0.5*(Uy0-Uy(ny))
IF NOT last THEN READ FROM next Uym
IF NOT first THEN WRITE TO prev Uym
WITH mkedata,meandata: MPROD=ni*Uym*U

! Write to binary file
! ------------------------------------
POINTER TO STORED STRUCTURE[
        ARRAY(-1..ny+1) OF MEANTERMS meandataimage
        ARRAY(-1..ny+1) OF TKETERMS tkedataimage
        ARRAY(-1..ny+1) OF MKETERMS mkedataimage
        ARRAY(-1..ny+1) OF RMS rmsdataimage
] tkeimage
IF NOT first THEN READ FROM prev
  tkeimage = OPEN("tke.bin")
  WITH tkeimage:
    meandataimage(miny..maxy)=meandata(miny..maxy);
    tkedataimage(miny..maxy)=tkedata(miny..maxy);
    mkedataimage(miny..maxy)=mkedata(miny..maxy);
    rmsdataimage(miny..maxy)=rmsdata(miny..maxy);
  CLOSE(tkeimage)
IF NOT last THEN WRITE TO next

! Be polite and say goodbye
! ------------------------------------
WRITE " "
WRITE "Goodbye, man!"
