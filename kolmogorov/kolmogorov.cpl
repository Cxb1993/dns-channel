
! 
! Computes the source term and the geometric space flux
! in the generalized Kolmogorov equation specialized 
! for channel flow, as in Marati, Casciola, Piva, JFM 2004, 
! equation 3.4 and following definitions.
 
! This program IS parallel with distributed memory support

! In order to reduce the computational time, an undersampling factor 
! in x and z directions is introduced and the computation of TDISS, MEAN
! TERMS and scale energy are skipped, as already computed with tke.cpl 
! 

! XXX Some terms (which ones?) are not computed in iy=0 AND iy=ny

gamma=0
outinterv=0
USE ../dnsdata
USE ../dnsdirect
USE ../tke/convenience
!USE rtchecks


! Parameters
! -----------------------------
nfmin=1
nfmax=1
dn=1
us=24	! Undersampling factor in x and z directions
! -----------------------------
INTEGER nftot=[(nfmax-nfmin) DIV dn]+1
INTEGER nx_us=nx DIV us,nz_us=nz DIV us
REAL dxOus=2*PI*us/[alfa0*(2*nx+1)], dzOus=2*PI*us/[alfa0*(2*nx+1)]
INLINE INTEGER FUNCTION izd(INTEGER iz)=IF iz>=0 THEN iz ELSE nzd+iz

! Definitions
! -----------------------------
FLUXVEC = STRUCTURE(REAL xx, yy, zz)
SCALEFLUX = STRUCTURE(FLUXVEC TURB, MEAN, VISC)
DIVSCALEFLUX = STRUCTURE(REAL TURB, MEAN, VISC) 
SPACEFLUX = STRUCTURE(REAL TURB, PRES, VISC)
MEANTERMS = STRUCTURE(REAL u,w,Uy,Wy,Uyy,Wyy) ! tke.cpl (with small letters for later convenience)
TKETERMS = STRUCTURE(REAL PROD,PDISS,TDIFF,PDIFF,VDIFF,PHI_TDIFF,PHI_PDIFF,PHI_VDIFF) ! tke.cpl
MKETERMS = STRUCTURE(REAL MPROD,TPROD,TMDIF,MMDIF,DISSu,DISSw,PHI_TMDIF,PHI_MMDIF) ! tke.cpl

ARRAY(nyl-2..nyh+2,0..nx_us,-nz_us..nz_us) OF REAL scalePROD=0
ARRAY(nyl-2..nyh+2) OF REAL scaleDISS=0
ARRAY(nyl-2..nyh+2,0..nx_us,-nz_us..nz_us) OF REAL scaleENER=0
ARRAY(nyl-2..nyh+2,0..nx_us,-nz_us..nz_us) OF SPACEFLUX phiC=0
ARRAY(nyl-2..nyh+2,0..nx_us,-nz_us..nz_us) OF SCALEFLUX phiR=0
ARRAY(nyl-2..nyh+2) OF MEANTERMS meandata=0

ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF COMPLEX pressure=0
ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF DERIVS Vder=0

USE ../energy-box/poisson_solver_parallel

POINTER TO STORED STRUCTURE[
	ARRAY(-1..ny+1,0..nx_us,-nz_us..nz_us) OF REAL scalePRODimage
        ARRAY(-1..ny+1) OF REAL scaleDISSimage
	ARRAY(-1..ny+1,0..nx_us,-nz_us..nz_us) OF REAL scaleENERimage
] sourceimage

POINTER TO STORED STRUCTURE[
	ARRAY(-1..ny+1,0..nx_us,-nz_us..nz_us) OF SCALEFLUX phiRimage
	ARRAY(-1..ny+1,0..nx_us,-nz_us..nz_us) OF DIVSCALEFLUX DIVphiRimage
] fluximage

POINTER TO STORED ARRAY(-1..ny+1,0..nx_us,-nz_us..nz_us) OF SPACEFLUX phiCimage

! Load MEANTERMS and TKETERMS
! ------------------------------
POINTER TO STORED STRUCTURE[
        ARRAY(-1..ny+1) OF MEANTERMS meandataimage
        ARRAY(-1..ny+1) OF TKETERMS tkedataimage
        ARRAY(-1..ny+1) OF MKETERMS mkedataimage
] tkeimage

IF NOT first THEN READ FROM prev
        tkeimage=OPEN("tke.bin")
        WITH tkeimage: meandata=meandataimage(nyl-2..nyh+2); scaleDISS=-4*tkedataimage(nyl-2..nyh+2).PDISS
        CLOSE(tkeimage)
IF NOT last THEN WRITE TO next

IF has_terminal THEN WRITE "Computing Kolmogorov Equation..."
! Compute Kolmogorov Equation
! -------------------------------
LOOP files FOR if=nfmin TO nfmax BY dn
        ! Loading data
        STRING field_name = WRITE("Field"if".fld")
        read_field_parallel(field_name)
        ! Derivatives and pressure
        compute_pressure(Vder,pressure)
        ! scalePROD, scaleENER, phiC.PRES
	rx0=2*PI/alfa0*us/(2*nx+1)
	rz0=2*PI/beta0*us/(2*nz+1)
	Ialfa0=I*alfa0
	Ibeta0=I*beta0
        LOOP planes FOR iy=nyl-2 TO nyh +2 
        WRITE iy
                LOOP FOR ialfa=0 TO nx 
                   Ialfa0ialfa=Ialfa0*ialfa; c=IF ialfa=0 THEN 1 ELSE 2
                   LOOP FOR ibeta=-nz TO nz WITH V(ialfa,ibeta,iy):
                        Ibeta0ibeta=Ibeta0*ibeta
			uv=v|u; uu=u|u; vv=v|v; ww=w|w; pv=v|pressure(ialfa,ibeta,iy)
                	LOOP FOR ix=0 TO nx_us
                        	LOOP FOR iz=-nz_us TO nz_us WITH phiC(iy,ix,iz),meandata(iy):
                                         COMPLEX E = Ialfa0ialfa*rx0*ix+Ibeta0ibeta*rz0*iz 
                                         E = c*(2-EXP(E)-EXP(-E)); 
	          scalePROD(iy,ix,iz)      = ~ + [ E * uv ].REAL * -2*Uy
                       PRES                = ~ + [ E * pv ].REAL *  2
                  scaleENER(iy,ix,iz)      = ~ + [ E * uu ].REAL + [ E * vv ].REAL + [ E * ww ].REAL
                                REPEAT     
                        REPEAT
		   REPEAT
                REPEAT
        ! phiC.TURB (pseudo-spectral)
		LOOP FOR irx=0 TO nx_us
                        rx = rx0*irx
			LOOP FOR irz=-nz_us TO nz_us 
                                WITH VVd(*,*,0): uu=0; vv=0; ww=0; uv=0; 
                                rz = rz0*irz
				LOOP FOR ialfa=0 TO nx
                                        Ialfa0ialfa=Ialfa0*ialfa
					LOOP FOR ibeta=-nz TO nz WITH V(ialfa,ibeta,iy):
                                          ibetad = IF ibeta>=0 THEN ibeta ELSE nzd+ibeta
                                          E    = Ialfa0ialfa*rx/2+Ibeta0*ibeta*rz/2
                                          E_2  =     [EXP(E)-EXP(-E)];
                                          E_2s = 0.5*[EXP(E)+EXP(-E)]; 
	                VVd(ialfa,ibetad,0).uu = E_2*u    !du
                        VVd(ialfa,ibetad,0).vv = E_2*v    !dv
	                VVd(ialfa,ibetad,0).ww = E_2*w    !dw
	                VVd(ialfa,ibetad,0).uv = E_2s*v   !vstar
					REPEAT
				REPEAT		 						
                                DO WITH VVd(ix,*,0): IFT(uu); IFT(vv); IFT(ww); IFT(uv) FOR ALL ix
                                DO WITH VVd(*,iz,0): 
                                   RFT(uu); RFT(vv); RFT(ww); RFT(uv) 
                                   DO WITH VVd(ix,iz,0):
                                     uw.REAL = [uu.REAL*uu.REAL+vv.REAL*vv.REAL+ww.REAL*ww.REAL]*(uv.REAL)
                                     uw.IMAG = [uu.IMAG*uu.IMAG+vv.IMAG*vv.IMAG+ww.IMAG*ww.IMAG]*(uv.IMAG)
                                   FOR ALL ix
                                   WITH VVd(*,iz,0): HFT(uw);
                                FOR ALL iz
                                DO WITH VVd(ix,*,0): FFT(uw) FOR ALL ix
                                WITH phiC(iy,irx,irz),VVd(0,0,0): TURB = uw.REAL;
			REPEAT
		REPEAT	
        ! scaleENERr, scale_turb and scale_mean
          IF iy>=nyl AND iy<=nyh THEN
                Vder.ux=0 ! Vder.ux.REAL=scaleENERr must be recomputed every iy, need to be erased
                Vry==V(ialfa,ibeta,iry)
                Vyc==V(ialfa,ibeta,iy)
                meandata.u=V(0,0,*).u.REAL; meandata.w=V(0,0,*).w.REAL; V(0,0,*)=0 ! This block needs V(0,0)=0
        	LOOP FOR iry=iy-2 TO iy+2
                deltameanU = meandata(iry).u-meandata(iy).u
                deltameanW = meandata(iry).w-meandata(iy).w
                	LOOP FOR irx=0 TO nx_us
                           LOOP FOR irz=-nz_us TO nz_us 
                                VVd=0; Vd=0 ! They must be recomputed every (irx,irz), need to be erased
                                rx = 2*PI/alfa0*(irx*us)/(2*nx+1); rz = 2*PI/beta0*(irz*us)/(2*nz+1)
                                LOOP FOR ialfa=0 TO nx AND ibeta=-nz TO nz
                                  ibetad = izd(ibeta); c=IF ialfa=0 THEN 1 ELSE 2
                                  alfa = alfa0*ialfa; beta = beta0*ibeta; E = EXP(I*alfa*rx+I*beta*rz)
                                      Vder(irx,irz,iry).ux.REAL =~+c*[NORM(Vry.u)+NORM(Vyc.u)-2*(Vyc.u|Vry.u)*E+
                                                                      NORM(Vry.v)+NORM(Vyc.v)-2*(Vyc.v|Vry.u)*E+
                                                                      NORM(Vry.w)+NORM(Vyc.w)-2*(Vyc.w|Vry.w)*E].REAL   ! scaleENERr
!                                      VVd(ialfa,ibetad,0).uu=Vry.u*E - Vyc.u  ! delta_turb.u
!                                      VVd(ialfa,ibetad,0).vv=Vry.v*E - Vyc.v  ! delta_turb.v
!                                      VVd(ialfa,ibetad,0).ww=Vry.v*E - Vyc.w  ! delta_turb.w
                                      Vd(ialfa,ibetad).u=Vry.u*E - Vyc.u ! delta_mean.u
                                      Vd(ialfa,ibetad).v=Vry.v*E - Vyc.v ! delta_mean.v
                                      Vd(ialfa,ibetad).w=Vry.w*E - Vyc.w ! delta_mean.w
                                REPEAT
!                                DO WITH VVd(ix,*,0), Vd(ix,*): IFT(u); IFT(v); IFT(w); IFT(uu); IFT(vv); IFT(ww);  FOR ALL ix  
!                                DO WITH VVd(*,iz,0), Vd(*,iz): 
                                DO WITH Vd(ix,*): IFT(u); IFT(v); IFT(w)  FOR ALL ix  
                                DO WITH Vd(*,iz): 
                                   RFT(u); RFT(v); RFT(w); ! RFT(uu); RFT(vv); RFT(ww); 
!				   DO WITH VVd(ix,iz,0),Vd(ix,iz): 
				   DO WITH Vd(ix,iz): 
!                                     uvw_r = [uu.REAL^2 + vv.REAL^2 + ww.REAL^2]
!                                     uvw_i = [uu.IMAG^2 + vv.IMAG^2 + ww.IMAG^2]
                                     uvw_r = [u.REAL^2 + v.REAL^2 + w.REAL^2]
                                     uvw_i = [u.IMAG^2 + v.IMAG^2 + w.IMAG^2]
	                             VVd(ix,iz,1).uu.REAL = uvw_r * u.REAL;     VVd(ix,iz,1).uu.IMAG = uvw_i * u.IMAG !deltad_turb.u  XXX was .uu.IMAG
	                             VVd(ix,iz,1).vv.REAL = uvw_r * v.REAL;     VVd(ix,iz,1).vv.IMAG = uvw_i * v.IMAG !deltad_turb.v  XXX was .vv.IMAG
	                             VVd(ix,iz,1).ww.REAL = uvw_r * w.REAL;     VVd(ix,iz,1).ww.IMAG = uvw_i * w.IMAG !deltad_turb.w  XXX was .ww.IMAG
                                     VVd(ix,iz,2).uu.REAL = uvw_r*deltameanU; VVd(ix,iz,2).uu.IMAG = uvw_i*deltameanU   !deltad_mean.u
                                     !VVd(ix,iz,2).vv = [u.REAL^2 + v.REAL^2 + w.REAL^2]*deltamean(v) + I*[u.IMAG^2 + v.IMAG^2 + w.IMAG^2]*deltamean(v) !deltad_mean.v
                                     VVd(ix,iz,2).ww.REAL = uvw_r*deltameanW; VVd(ix,iz,2).ww.IMAG = uvw_i*deltameanW !deltad_mean.w
				   FOR ALL ix
                                   WITH VVd(*,iz,1): HFT(uu); HFT(vv); HFT(ww); WITH VVd(*,iz,2): HFT(uu); HFT(ww)  !HFT(vv) removed
                                FOR ALL iz
                                DO WITH VVd(ix,*,1): FFT(uu); FFT(vv); FFT(ww); WITH VVd(ix,*,2): FFT(uu); FFT(ww) FOR ALL ix   !FFT(vv) removed
                                WITH Vder(irx,irz,iry): 
                                   uy.REAL=VVd(0,0,1).uu.REAL; vy.REAL=VVd(0,0,1).vv.REAL; wy.REAL=VVd(0,0,1).ww.REAL; ! scale_turb(xx,yy,zz)
                                   uz.REAL=VVd(0,0,2).uu.REAL; vz.REAL=0.0;                wz.REAL=VVd(0,0,2).ww.REAL; ! scale_mean(xx,yy,zz)
                                   WRITE irx,irz,iry,uz,wz,uy,wy
                           REPEAT  
                        REPEAT
                REPEAT
                V(0,0,*).u.REAL=meandata(*).u; V(0,0,*).w.REAL=meandata(*).w;
	        DO 
                     WITH phiR(iy,ix,iz).TURB, Vder(ix,iz,iy): xx =~+uy.REAL; yy =~+vy.REAL; zz=~+wy.REAL ! scale_turb(xx,yy,zz)
                     WITH phiR(iy,ix,iz).MEAN, Vder(ix,iz,iy): xx =~+uz.REAL; yy =~+vz.REAL; zz=~+wz.REAL ! scale_mean(xx,yy,zz)
                FOR ix=0 TO nx_us AND iz=-nz_us TO nz_us 
        ! D1(scaleENERr)->phiR.VISC.yy  and  phiR.VISC.xx,zz
                DO WITH derivs_standalone(iy):
                     rx = 2*PI/alfa0*(ix*us)/(2*nx+1); rz = 2*PI/beta0*(iz*us)/(2*nz+1)
                ! yr-derivatives
                     phiR(iy,ix,iz).VISC.yy = ~ -2*ni*D1(Vder(ix,iz,iy+(-2..2)).ux.REAL) ! Vder.ux.REAL==scaleENERr
                     LOOP FOR ialfa=0 TO nx AND ibeta=-nz TO nz WITH V(ialfa,ibeta,iy):
                       Ialfa = alfa0*ialfa*I; Ibeta = beta0*ibeta*I; E = EXP(Ialfa*rx+Ibeta*rz); 
		       WITH phiR(iy,ix,iz).VISC:
		         xx = ~ +(IF ialfa=0 THEN 4 ELSE 8)*ni * [Ialfa*(NORM(u) + NORM(v) + NORM(w)) * E].REAL
		         zz = ~ +(IF ialfa=0 THEN 4 ELSE 8)*ni * [Ibeta*(NORM(u) + NORM(v) + NORM(w)) * E].REAL
                      REPEAT
		FOR ix=0 TO nx_us AND iz=-nz_us TO nz_us
          END IF 
        REPEAT planes
        ! phiC.VISC		
	DO WITH phiC(*,ix,iz),V(0,0,*): 
		deriv(scaleENER(*,ix,iz),v.REAL); FlushStep1; LeftLUDivStep2(v.REAL,D0mat); FlushStep2
		VISC = ~ - ni/2 * v.REAL
	FOR ix=0 TO nx_us AND iz=-nz_us TO nz_us 
REPEAT files

! Ensemble averaging (phiC,scalePROD,scaleENER)
! ----------------------------
WITH phiC: scalePROD=~/nftot; scaleENER=~/nftot; PRES=~/nftot; TURB=~/nftot; VISC=~/nftot
WITH phiR: 
           TURB.xx=~/nftot; TURB.yy=~/nftot; TURB.zz=~/nftot; 
           VISC.xx=~/nftot; VISC.yy=~/nftot; VISC.zz=~/nftot; 
           MEAN.xx=~/nftot; MEAN.yy=~/nftot; MEAN.zz=~/nftot; 

! Saving to disk
! ----------------------------
IF has_terminal THEN WRITE "Saving results to disk..."
IF NOT first THEN READ FROM prev
	sourceimage=OPEN("source.dat")
	LOOP FOR iy=miny TO maxy WITH sourceimage:
		scalePRODimage(iy)=scalePROD(iy)
                scaleDISSimage(iy)=scaleDISS(iy)
		scaleENERimage(iy)=scaleENER(iy)
	REPEAT
	CLOSE sourceimage
	phiCimage=OPEN("phiC.dat")
	LOOP FOR iy=miny TO maxy
		phiCimage(iy) = phiC(iy)
	REPEAT
	CLOSE phiCimage
	fluximage=OPEN("phiR.dat")
	LOOP FOR iy=miny TO maxy WITH fluximage:
		phiRimage(iy) = phiR(iy)
	REPEAT
	CLOSE fluximage
IF NOT last THEN WRITE TO next

! Be polite and say Goodbye
! ----------------------------
WRITE "Goodbye, man!"
