!USE rtchecks
gamma=0
outinterv=0
USE ../dnsdata
USE ../dnsdirect

!
! Computes the source term in the generalized Kolmogorov equation specialized for channel flow,
! as in Marati, Casciola, Piva, JFM 2004, equation 3.4 and following definitions.
! 
! This is a parallel version. 
!
! N.B. * = midpoint average
!
! In order to reduce the computational time, an undersampling factor in x and z directions is introduced
!

! Parameters
! ---------------------------
nfmin=1 nfmax=1 
outfilename=('source.dat')
us=1	! Undersampling factor in x and z directions
! ---------------------------
INTEGER nftot=nfmax-nfmin+1

! Definitions
! ---------------------------
!SOURCE = STRUCTURE(REAL prod, dissip)
SOURCE = STRUCTURE(REAL PROD, DISS)

ARRAY(nyl-2..nyh+2,0..nx DIV us,-nz DIV us..nz DIV us) OF SOURCE scale_source=0
ARRAY(nyl-2..nyh+2,0..nx DIV us,-nz DIV us..nz DIV us) OF REAL scale_energy=0
ARRAY(nyl-2..nyh+2) OF REAL dUdy=0, meanvel=0
ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF DERIVS Vder=0
ARRAY(0..nxd-1,0..nzd-1) OF DERIVS Vderd=0
ARRAY(0..nxd-1,0..nzd-1) OF DERPRODS VVderd=0

ARRAY(0..100) OF CHAR field_name
FILE runfile; IF has_terminal THEN runfile=CREATE('run.log')

POINTER TO STORED STRUCTURE[
	ARRAY(-1..ny+1,0..nx DIV us,-nz DIV us..nz DIV us) OF SOURCE scale_sourceimage
	ARRAY(-1..ny+1,0..nx DIV us,-nz DIV us..nz DIV us) OF REAL scale_energyimage
] sourceimage


! Main loop on files
LOOP files FOR if=nfmin TO nfmax

	! Setting to zero
	V=0; Vder=0; meanvel=0; dUdy=0

        ! Loading data
        field_name = WRITE("Field"if".fld")
        IF has_terminal THEN WRITE TO runfile "Processing field : ",field_name; FLUSH(runfile)
        IF has_terminal THEN WRITE "Processing field : ",field_name
        IF NOT first THEN READ FROM prev
                diskfield=OPEN(field_name)
                WITH diskfield
                        V(0,0,*).u.REAL=uavimage(nyl-2..nyh+2)
                        V(0,0,*).w.REAL=wavimage(nyl-2..nyh+2)
                        LOOP FOR iy=nyl-2 TO nyh+2
                                DO V(ix,iz,iy).v=fieldimage(iy,ix,iz).v FOR ALL ix,iz EXCEPT ix=0 AND iz=0
                                DO V(ix,iz,iy).u=fieldimage(iy,ix,iz).eta FOR ALL ix,iz EXCEPT ix=0 AND iz=0
                        REPEAT LOOP
                CLOSE diskfield
        IF NOT last THEN WRITE TO next
        vetaTOuvw


        ! Derivatives of the velocity field
        IF has_terminal THEN WRITE TO runfile "Computing derivatives, field : ", field_name; FLUSH(runfile)
        IF has_terminal THEN WRITE "Computing derivatives, field : ", field_name
        LOOP FOR ALL ix,iz EXCEPT ix=0 AND iz=0 WITH Vder(ix,iz,*), V(ix,iz,*)
                ialfa = I*alfa0*ix; ibeta = I*beta0*iz
                ux(*)=ialfa*u(*); vx(*)=ialfa*v(*); wx(*)=ialfa*w(*)
                uz(*)=ibeta*u(*); vz(*)=ibeta*v(*); wz(*)=ibeta*w(*)
                deriv(u(*).REAL,uy.REAL); FlushStep1; LeftLUDivStep2(uy.REAL,D0mat); FlushStep2
                deriv(u(*).IMAG,uy.IMAG); FlushStep1; LeftLUDivStep2(uy.IMAG,D0mat); FlushStep2
                deriv(v(*).REAL,vy.REAL); FlushStep1; LeftLUDivStep2(vy.REAL,D0mat); FlushStep2
                deriv(v(*).IMAG,vy.IMAG); FlushStep1; LeftLUDivStep2(vy.IMAG,D0mat); FlushStep2
                deriv(w(*).REAL,wy.REAL); FlushStep1; LeftLUDivStep2(wy.REAL,D0mat); FlushStep2
                deriv(w(*).IMAG,wy.IMAG); FlushStep1; LeftLUDivStep2(wy.IMAG,D0mat); FlushStep2
        REPEAT

	! Mean velocity profile
	DO meanvel(iy) = V(0,0,iy).u.REAL FOR iy=nyl-2 TO nyh+2
	deriv(meanvel,dUdy); FlushStep1; LeftLUDivStep2(dUdy,D0mat); FlushStep2


	! ----------------------------------------------------------------------------------------------- !
	! Source term (update) and scale_energy (update): source = -2<\deltau \deltav> (dU/dy)* - 4<eps*>
	rx0=2*PI/alfa0*us/(2*nx+1)
	rz0=2*PI/beta0*us/(2*nz+1)
	Ialfa0=I*alfa0
	Ibeta0=I*beta0

	! Production
	LOOP FOR iy=nyl-2 TO nyh+2
                IF has_terminal THEN WRITE TO runfile "Computing production, field : ",field_name, "iy=",iy; FLUSH(runfile)
                IF has_terminal THEN WRITE "Computing production, field : ",field_name, "iy=",iy
                LOOP FOR ialfa=0 TO nx 
                   Ialfa0ialfa=Ialfa0*ialfa
                   LOOP FOR ibeta=-nz TO nz WITH V(ialfa,ibeta,iy):
                        Ibeta0ibeta=Ibeta0*ibeta
			uv=u*CONJG(v); uu=u*CONJG(u); vv=v*CONJG(v); ww=w*CONJG(w)
                	LOOP FOR ix=0 TO nx DIV us
                        	E = Ialfa0ialfa*rx0*ix
                        	LOOP FOR iz=-nz DIV us TO nz DIV us
                                        E  = ~+Ibeta0ibeta*rz0*iz;
                                        E  = (2-EXP(E)-EXP(E))
	scale_source(iy,ix,iz).prod = ~ + 2*[ E * uv ].REAL * -2*dUdy(iy)
        scale_energy(iy,ix,iz)      = ~ + 2*[ E * uu ].REAL +
                                          2*[ E * vv ].REAL +
                                          2*[ E * ww ].REAL
                                REPEAT      
                        REPEAT
		   REPEAT
                REPEAT
        REPEAT

        ! Pseudo-dissipation
        IF has_terminal THEN WRITE TO runfile "Computing dissipation, field : ", field_name; FLUSH(runfile)
        IF has_terminal THEN WRITE "Computing dissipation, field : ", field_name
        LOOP FOR iy=nyl-2 TO nyh+2
                Vderd=0; VVderd=0
                LOOP FOR ix=0 TO nx
                        Vderd(ix,0..nz) = Vder(ix,0..nz,iy)
                        Vderd(ix,nzd+(-nz..-1)) = Vder(ix,-nz..-1,iy)
                REPEAT LOOP
                DO WITH Vderd(ix,*): IFT(ux); IFT(uy); IFT(uz); IFT(vx); IFT(vy); IFT(vz); IFT(wx); IFT(wy); IFT(wz) FOR ALL ix
                DO WITH Vderd(*,iz): RFT(ux); RFT(uy); RFT(uz); RFT(vx); RFT(vy); RFT(vz); RFT(wx); RFT(wy); RFT(wz) FOR ALL iz

                LOOP FOR ALL ix, iz WITH Vderd(ix,iz), VVderd(ix,iz)
                                ux2.REAL=ux.REAL^2; ux2.IMAG=ux.IMAG^2
                                uy2.REAL=uy.REAL^2; uy2.IMAG=uy.IMAG^2
                                uz2.REAL=uz.REAL^2; uz2.IMAG=uz.IMAG^2
                                vx2.REAL=vx.REAL^2; vx2.IMAG=vx.IMAG^2
                                vy2.REAL=vy.REAL^2; vy2.IMAG=vy.IMAG^2
                                vz2.REAL=vz.REAL^2; vz2.IMAG=vz.IMAG^2
                                wx2.REAL=wx.REAL^2; wx2.IMAG=wx.IMAG^2
                                wy2.REAL=wy.REAL^2; wy2.IMAG=wy.IMAG^2
                                wz2.REAL=wz.REAL^2; wz2.IMAG=wz.IMAG^2
                REPEAT LOOP
                DO WITH VVderd(*,iz): HFT(ux2);HFT(vx2);HFT(wx2);HFT(uy2);HFT(vy2);HFT(wy2);HFT(uz2);HFT(vz2);HFT(wz2) FOR iz=0 TO nzd-1
                DO WITH VVderd(ix,*): FFT(ux2);FFT(vx2);FFT(wx2);FFT(uy2);FFT(vy2);FFT(wy2);FFT(uz2);FFT(vz2);FFT(wz2) FOR ix=0 TO nxd-1

                DO WITH VVderd(0,0): scale_source(iy,ix,iz).dissip = ~ + ni*REAL(ux2 + uy2 + uz2 + vx2 + vy2 + vz2 + wx2 + wy2 + wz2) * -4 FOR ALL ix, iz
        REPEAT LOOP


REPEAT files


! Ensemble averaging
DO WITH scale_source(iy,ix,iz): prod = ~ / nftot; dissip = ~ / nftot FOR ALL iy, ix, iz
DO scale_energy(iy,ix,iz) = ~ / nftot FOR ALL iy, ix, iz


! Saving to disk
IF NOT first THEN READ FROM prev
	sourceimage=OPEN(outfilename)
	LOOP FOR iy=miny TO maxy 
		sourceimage.scale_sourceimage(iy,0..nx DIV us,-nz DIV us..nz DIV us) = scale_source(iy,0..nx DIV us,-nz DIV us..nz DIV us)
		sourceimage.scale_energyimage(iy,0..nx DIV us,-nz DIV us..nz DIV us) = scale_energy(iy,0..nx DIV us,-nz DIV us..nz DIV us)
	REPEAT
	CLOSE sourceimage
IF NOT last THEN WRITE TO next


IF has_terminal THEN CLOSE(runfile)


