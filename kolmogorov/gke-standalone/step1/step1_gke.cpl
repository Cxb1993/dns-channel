! 
! Computes the source term, space and scale flux
! in the generalized Kolmogorov equation specialized
! for channel flow, as in Marati, Casciola, Piva, JFM 2004,
! equation 3.4 and following definitions.
! 
! This program IS parallel
!  

!USE rtchecks
USE ../gkedata

SHARED ARRAY(-1..ny+1,0..mx-1,0..mz-1) OF GKETERMS gke=0
SHARED ARRAY(1..2,1..2,0..nxd-1,0..nzd-1) OF STRUCTURE(COMPLEX UU,VV,WW,UV,PV,uuu,uuv,uuw,vvu,vvv,vvw,wwu,wwv,www,uvu,uvv,uwu,uww,vwv,vww) R=0
#define pR(A,f) A(*,iz).f.REALIFIED(ix)
#define mR(A,f) A(*,(nzd-iz) MOD nzd).f.REALIFIED((2*nxc-ix) MOD (2*nxc))
#define R0(A,f) A(*,0).f.REALIFIED(0)
! Compute Kolmogorov Equation
! -------------------------------
LOOP outer FOR iy=nyl TO nyh
LOOP FOR iy1 IN (iy,ny-iy)
     ! Symmetry-aware heler variable 
     IY1 = IF iy1>ny DIV 2 THEN ny-iy1 ELSE iy1; sig = IF iy1>ny DIV 2 THEN -1 ELSE 1;
     ! Reload data 
     IF iy1>ny DIV 2 THEN gke(IY1+(0..ny-2*IY1),*,*)=gkedata(startpos(IY1)+(0..ny-2*IY1),*,*) ELSE gke(IY1+(0..ny-2*IY1),*,*)=0; END IF
     ! 
     LOOP files FOR if=nfmin TO nfmax BY dn
        ! Open V field
        STRING field_name = WRITE("Dati.cart."if".out"); diskimage = OPEN(field_name);     bufV = diskimage.Vimage(iy1,*,*); V(*,*,1)=bufV; mean(1)=uiujimage.meandata(iy1)
        ! Open p field
        STRING pressure_name = WRITE('pField'if'.fld');  pressuredata=OPEN(pressure_name); bufp = pressuredata(*,*,iy1);     p(*,*,1)=bufp; uiuj(1)=uiujimage.uiujdata(iy1) 
        ! Remove mean
        WITH mean(1),V(0,0,1): u.REAL=~-U; w.REAL=~-W; p(0,0,1)=~-P;
        PARALLEL LOOP FOR ismp=0 TO nsmp-1
          convolutions(V(*,*,1),VVd(*,*,1))
          LOOP inner FOR IY2=IY1 TO ny-IY1
            iy2 = IF iy1>ny DIV 2 THEN ny-IY2 ELSE IY2
            ! Open V field, remove mean
            IF ismp=0 THEN bufV = diskimage.Vimage(iy2,*,*); V(*,*,2)=bufV; V(*,*,2)=bufV; mean(2)=uiujimage.meandata(iy2); WITH mean(2),V(0,0,2): u.REAL=~-U; w.REAL=~-W;
            ! Open p field, remove mean
            IF ismp=0 THEN bufp = pressuredata(*,*,iy2);     p(*,*,2)=bufp; p(*,*,2)=bufp; uiuj(2)=uiujimage.uiujdata(iy2); WITH mean(2): p(0,0,2)=~-P;
            SYNC(ismp,nsmp)
            convolutions(V(*,*,2),VVd(*,*,2));
            LOOP FOR i1=1 TO 2 AND i2=1 TO 2
              LOOP FOR ix=ismp*(nx+1) DIV nsmp TO (ismp+1)*(nx+1) DIV nsmp -1
                R(i1,i2,ix,nz+1..nzd-nz-1)=0
                DO WITH V(ix,iz,*), VVd(ix,izd,*), R(i1,i2,ix,izd):
                  UU=u(i1)|u(i2);   VV=v(i1)|v(i2);   WW=w(i1)|w(i2);   UV=u(i1)|v(i2);   PV=p(ix,iz,i1)|v(i2);
                  uuu=uu(i1)|u(i2); uuv=uu(i1)|v(i2); uuw=uu(i1)|w(i2); vvu=vv(i1)|u(i2); vvv=vv(i1)|v(i2); vvw=vv(i1)|w(i2);
                  wwu=ww(i1)|u(i2); wwv=ww(i1)|v(i2); www=ww(i1)|w(i2); uvu=uv(i1)|u(i2); uvv=uv(i1)|v(i2); uwu=uw(i1)|u(i2);
                  uww=uw(i1)|w(i2); vwv=vw(i1)|v(i2); vww=vw(i1)|w(i2);
                FOR iz=-nz TO nz
                WITH R(i1,i2,ix,*):  INLINE LOOP FOR iii IN (UU,VV,WW,UV,PV,uuu,uuv,uuw,vvu,vvv,vvw,wwu,wwv,www,uvu,uvv,uwu,uww,vwv,vww); IFT(iii); REPEAT
              REPEAT LOOP
              IF ismp=0 THEN R(i1,i2,nx+1..nxd-1)=0
              SYNC(ismp,nsmp)
              DO WITH R(i1,i2,*,iz): 
                INLINE LOOP FOR iii IN (UU,VV,WW,UV,PV,uuu,uuv,uuw,vvu,vvv,vvw,wwu,wwv,www,uvu,uvv,uwu,uww,vwv,vww); RFT(iii); REPEAT
              FOR iz=ismp*nzd DIV nsmp TO (ismp+1)*nzd DIV nsmp -1
            REPEAT
            SYNC(ismp,nsmp)
        ! Compute GKE terms
#define Rturb(f,g) ( pR(R(1,2),f) - mR(R(2,1),f) + 2*pR(R(1,2),g) - 2*mR(R(2,1),g) + R0(R(2,2),f) - R0(R(1,1),f) )
#define Cturb(f,g) ( pR(R(1,2),f) + mR(R(2,1),f) - 2*pR(R(1,2),g) - 2*mR(R(2,1),g) + R0(R(2,2),f) + R0(R(1,1),f) )
#define Rsum(f)    ( R0(R(2,2),f) + R0(R(1,1),f) -   pR(R(1,2),f) -   mR(R(2,1),f) )
#define Ravg(f)    ( R0(R(2,2),f) - R0(R(1,1),f) -   pR(R(1,2),f) +   mR(R(2,1),f) )
            DO WITH gke(IY2,jx,jz), mean(*), uiuj(*):
              ix=imx(jx); iz=imz(jz)
              phiR(1) = ~+     Rturb(uuu,uuu) + Rturb(vvu,uvv) + Rturb(wwu,uww)
              phiR(2) = ~+sig*[Rturb(uuv,uvu) + Rturb(vvv,vvv) + Rturb(wwv,vww)]
              phiR(3) = ~+     Rturb(uuw,uwu) + Rturb(vvw,vwv) + Rturb(www,www)
              iscaleENER = Rsum(UU)+Rsum(VV)+Rsum(WW); scaleENER = ~+iscaleENER
              phiR(1) = ~+iscaleENER*[ U(2)-U(1) ]; phiR(2) = ~+0; phiR(3) = ~+iscaleENER*[ W(2)-W(1) ]
              phiC = ~+0.5*sig*[ Cturb(uuv,uvu)+Cturb(vvv,vvv)+Cturb(wwv,vww) ]; phiC = ~+2*sig*[ Rsum(PV) ]
              scalePROD = ~-[ Rsum(UV) ]*[Uy(1)+Uy(2)]-[ Ravg(UV) ]*[Uy(2)-Uy(1)]-[SUM psdiss(1,i)+psdiss(2,i) FOR i=1 TO 3]
            FOR jx=ismp*mx DIV nsmp TO (ismp+1)*mx DIV nsmp -1 AND jz=0 TO mz-1
        ! phiR.rVISC.(xx,zz) requires derivatives in homogeneous directions of scaleENER
            DO 
              DO Vd(*,iz).v.REALIFIED(ix)=Rsum(UU)+Rsum(VV)+Rsum(WW) FOR ix=0 TO 2*nxd-1 
              WITH Vd(*,iz): HFT(v)
            FOR iz=ismp*nzd DIV nsmp TO (ismp+1)*nzd DIV nsmp -1
            SYNC(ismp,nsmp)
            DO
              WITH Vd(ix,*): FFT(v)
              Vd(ix,nz+1..nzd-nz-1)=0; DO WITH Vd(ix,izd): u=I*alfa0*ix*v;  w=I*beta0*iz*v FOR iz=-nz TO nz 
              WITH Vd(ix,*): IFT(u); IFT(w)
            FOR ix=ismp*(nx+1) DIV nsmp TO (ismp+1)*(nx+1) DIV nsmp -1
            IF ismp=0 THEN Vd(nx+1..nxd-1)=0
            SYNC(ismp,nsmp)
            DO WITH Vd(*,iz): RFT(u); RFT(w) FOR iz=ismp*nzd DIV nsmp TO (ismp+1)*nzd DIV nsmp -1
            SYNC(ismp,nsmp)
            DO 
              DO WITH gke(IY2,ix,iz): phiR(1) = ~-2*ni*Vd(*,imz(iz)).u.REALIFIED(imx(ix)); phiR(3) = ~-2*ni*Vd(*,imz(iz)).w.REALIFIED(imx(ix)) FOR iz=0 TO mz-1
            FOR ix=ismp*mx DIV nsmp TO (ismp+1)*mx DIV nsmp -1
            SYNC(ismp,nsmp)
          REPEAT inner
        REPEAT
     REPEAT files
     ! Average on disk
     IF iy1>=ny DIV 2 THEN WITH gke(IY1+(0..ny-2*IY1),*,*):INLINE LOOP FOR i IN (phiR,phiC,scaleENER,scalePROD) i=~*0.5/nftot;REPEAT
     gkedata(startpos(IY1)+(0..ny-2*IY1),*,*)=gke(IY1+(0..ny-2*IY1),*,*)
REPEAT
REPEAT outer

CLOSE(gkedata)
CLOSE(uiujimage)

