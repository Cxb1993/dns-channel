!USE rtchecks
USE dnsdata
USE dnsdirect

ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF COMPLEX pressure=0
USE poisson_solver_parallel

!
! Computes the geometric space flux in the generalized Kolmogorov equation specialized for channel flow,
! as in Marati, Casciola, Piva, JFM 2004, equation 3.4 and following definitions.
! 
! This is a parallel version. 
!
! N.B. * = midpoint average
!
! An undersampling factor in x and z directions is introduced to reduce the computational time
!

! Parameters
INTEGER nfmin=1, nfmax=1, nftot
nftot=nfmax-nfmin+1
ARRAY(0..100) OF CHAR fluxname='phi_c.dat'
INTEGER us=4	! Undersampling factor in x and z directions

! Definitions
SPACEFLUX = STRUCTURE(REAL turb, pres, visc)

ARRAY(nyl-2..nyh+2,0..nx DIV us,-nz DIV us..nz DIV us) OF REAL scale_energy=0
ARRAY(nyl-2..nyh+2,0..nx DIV us,-nz DIV us..nz DIV us) OF SPACEFLUX phi_c=0
ARRAY(0..nx,-nz..nz) OF COMPLEX du, dv, dw, vstar
ARRAY(0..nxd-1,0..nzd-1) OF COMPLEX dud, dvd, dwd, vstard
ARRAY(0..2*nzd-1,0..nzd-1) OF REAL tmpturb=0
ARRAY(nyl-2..nyh+2) OF REAL tmpvisc=0

ARRAY(0..100) OF CHAR field_name
FILE runfile; IF has_terminal THEN runfile=CREATE('run.log')

POINTER TO STORED ARRAY(-1..ny+1,0..nx DIV us,-nz DIV us..nz DIV us) OF SPACEFLUX phi_cimage


! Main loop on files
LOOP files FOR if=nfmin TO nfmax

	! Setting to zero
	V=0; pressure=0; scale_energy=0

        ! Loading data
        field_name = WRITE("Field"if".fld")
        IF has_terminal THEN WRITE TO runfile "Processing field : ",field_name; FLUSH(runfile)
        IF has_terminal THEN WRITE "Processing field : ",field_name
        IF NOT first THEN READ FROM prev
                diskfield=OPEN(field_name)
                WITH diskfield
                        V(0,0,*).u.REAL=uavimage(nyl-2..nyh+2)
                        V(0,0,*).w.REAL=wavimage(nyl-2..nyh+2)
                        LOOP FOR iy=nyl-2 TO nyh+2
                                DO V(ix,iz,iy).v=fieldimage(iy,ix,iz).v FOR ALL ix,iz EXCEPT ix=0 AND iz=0
                                DO V(ix,iz,iy).u=fieldimage(iy,ix,iz).eta FOR ALL ix,iz EXCEPT ix=0 AND iz=0
                        REPEAT LOOP
                CLOSE diskfield
        IF NOT last THEN WRITE TO next
        vetaTOuvw

        ! Pressure field
        IF has_terminal THEN WRITE TO runfile "Computing pressure, field : ", field_name; FLUSH(runfile)
        IF has_terminal THEN WRITE "Computing pressure, field : ", field_name
        compute_pressure


	! ----------------------------------------------------------------------------------------------- !
	! Scale energy (for this file)
	LOOP FOR iy=nyl-2 TO nyh+2
                IF has_terminal THEN WRITE TO runfile "Computing scale energy, field : ",field_name, "iy=",iy; FLUSH(runfile)
                IF has_terminal THEN WRITE "Computing scale energy, field : ",field_name, "iy=",iy
                LOOP FOR ix=0 TO nx DIV us
                        LOOP FOR iz=-nz DIV us TO nz DIV us 
                                rx = 2*PI/alfa0*(ix*us)/(2*nx+1); rz = 2*PI/beta0*(iz*us)/(2*nz+1)

                                LOOP FOR ialfa=1 TO nx AND ibeta=-nz TO nz WITH V(ialfa,ibeta,iy)
                                        alfa = alfa0*ialfa; beta = beta0*ibeta
        scale_energy(iy,ix,iz) = ~ + 2*[ (2 - EXP(I*alfa*rx+I*beta*rz) - EXP(-I*alfa*rx-I*beta*rz)) * u*CONJG(u) ].REAL +
                                     2*[ (2 - EXP(I*alfa*rx+I*beta*rz) - EXP(-I*alfa*rx-I*beta*rz)) * v*CONJG(v) ].REAL +
                                     2*[ (2 - EXP(I*alfa*rx+I*beta*rz) - EXP(-I*alfa*rx-I*beta*rz)) * w*CONJG(w) ].REAL
                                REPEAT
                                LOOP FOR ibeta=-nz TO nz WITH V(0,ibeta,iy)
                                        beta = beta0*ibeta
        scale_energy(iy,ix,iz) = ~ + [ (2 - EXP(I*beta*rz) - EXP(-I*beta*rz)) * u*CONJG(u) ].REAL +
                                     [ (2 - EXP(I*beta*rz) - EXP(-I*beta*rz)) * v*CONJG(v) ].REAL +
                                     [ (2 - EXP(I*beta*rz) - EXP(-I*beta*rz)) * w*CONJG(w) ].REAL
                                REPEAT
                        REPEAT
                REPEAT
        REPEAT

	! ----------------------------------------------------------------------------------------------- !
	! Spatial flux phi_c.pres 
	LOOP FOR iy=nyl-2 TO nyh+2
                IF has_terminal THEN WRITE TO runfile "Computing phi_c.pres, field : ",field_name, "iy=",iy; FLUSH(runfile)
                IF has_terminal THEN WRITE "Computing phi_c.pres, field : ",field_name, "iy=",iy
                LOOP FOR ix=0 TO nx DIV us
                        LOOP FOR iz=-nz DIV us TO nz DIV us WITH phi_c(iy,ix,iz) 
                                rx = 2*PI/alfa0*(ix*us)/(2*nx+1); rz = 2*PI/beta0*(iz*us)/(2*nz+1)

                                LOOP FOR ialfa=1 TO nx AND ibeta=-nz TO nz WITH V(ialfa,ibeta,iy)
                                        alfa = alfa0*ialfa; beta = beta0*ibeta
		pres = ~ + 2*[ (2 - EXP(I*alfa*rx+I*beta*rz) - EXP(-I*alfa*rx-I*beta*rz)) * pressure(ialfa,ibeta,iy)*CONJG(v) ].REAL * 2 
                                REPEAT
                                LOOP FOR ibeta=-nz TO nz WITH V(0,ibeta,iy)
                                        beta = beta0*ibeta
        	pres = ~ + [ (2 - EXP(I*beta*rz) - EXP(-I*beta*rz)) * pressure(0,ibeta,iy)*CONJG(v) ].REAL * 2 
                                REPEAT
                        REPEAT
                REPEAT
	REPEAT

	! ----------------------------------------------------------------------------------------------- !
	! Spatial flux phi_c.turb 
	LOOP FOR iy=nyl-2 TO nyh+2
                IF has_terminal THEN WRITE TO runfile "Computing phi_c.turb, field : ",field_name, "iy=",iy; FLUSH(runfile)
                IF has_terminal THEN WRITE "Computing phi_c.turb, field : ",field_name, "iy=",iy

		LOOP FOR irx=0 TO nx DIV us
			LOOP FOR irz=-nz DIV us TO nz DIV us WITH phi_c(iy,irx,irz)
                                rx = 2*PI/alfa0*(irx*us)/(2*nx+1); rz = 2*PI/beta0*(irz*us)/(2*nz+1)
		
				LOOP FOR ialfa=0 TO nx
					LOOP FOR ibeta=-nz TO nz WITH V(ialfa,ibeta,iy)
						alfa=alfa0*ialfa; beta=beta0*ibeta
		du(ialfa,ibeta) = [EXP(I*alfa*rx/2+I*beta*rz/2) - EXP(-I*alfa*rx/2-I*beta*rz/2)]*u
		dv(ialfa,ibeta) = [EXP(I*alfa*rx/2+I*beta*rz/2) - EXP(-I*alfa*rx/2-I*beta*rz/2)]*v
		dw(ialfa,ibeta) = [EXP(I*alfa*rx/2+I*beta*rz/2) - EXP(-I*alfa*rx/2-I*beta*rz/2)]*w
		vstar(ialfa,ibeta) = 0.5*[EXP(I*alfa*rx/2+I*beta*rz/2) + EXP(-I*alfa*rx/2-I*beta*rz/2)]*v
					REPEAT
				REPEAT	
							
                dud=0; dvd=0; dwd=0; vstard=0; tmpturb=0
                LOOP FOR ix=0 TO nx
                        dud(ix,0..nz) = du(ix,0..nz); dud(ix,nzd+(-nz..-1)) = du(ix,-nz..-1)
                        dvd(ix,0..nz) = dv(ix,0..nz); dvd(ix,nzd+(-nz..-1)) = dv(ix,-nz..-1)
                        dwd(ix,0..nz) = dw(ix,0..nz); dwd(ix,nzd+(-nz..-1)) = dw(ix,-nz..-1)
                        vstard(ix,0..nz) = vstar(ix,0..nz); vstard(ix,nzd+(-nz..-1)) = vstar(ix,-nz..-1)
                REPEAT LOOP
                DO IFT(dud(ix,*)); IFT(dvd(ix,*)); IFT(dwd(ix,*)); IFT(vstard(ix,*)) FOR ALL ix
                DO RFT(dud(*,iz)); RFT(dvd(*,iz)); RFT(dwd(*,iz)); RFT(vstard(*,iz)) FOR ALL iz

DO tmpturb(ix,iz) = [dud(*,iz).REALIFIED(ix)^2 + dvd(*,iz).REALIFIED(ix)^2 + dwd(*,iz).REALIFIED(ix)^2] *
			vstard(*,iz).REALIFIED(ix) FOR ix=0 TO 2*nxd-1 AND iz=0 TO nzd-1	
				
		DO turb = ~ + tmpturb(ix,iz)/(2*nxd*nzd) FOR ALL ix, iz

			REPEAT
		REPEAT		

	REPEAT		

	! ----------------------------------------------------------------------------------------------- !
	! Spatial flux phi_c.visc
        IF has_terminal THEN WRITE TO runfile "Computing phi_c.visc, field : ",field_name; FLUSH(runfile)
        IF has_terminal THEN WRITE "Computing phi_c.visc, field : ",field_name
	LOOP FOR ix=0 TO nx DIV us AND iz=-nz DIV us TO nz DIV us WITH phi_c(*,ix,iz)
		tmpvisc=0
		deriv(scale_energy(*,ix,iz),tmpvisc); FlushStep1; LeftLUDivStep2(tmpvisc,D0mat); FlushStep2
		visc = ~ - ni/2 * tmpvisc
	REPEAT

REPEAT files


! Ensemble averaging
LOOP FOR ALL iy, ix, iz WITH phi_c(iy,ix,iz)
	turb = ~ / nftot; pres = ~ / nftot; visc = ~ / nftot
REPEAT


! Saving to disk
IF NOT first THEN READ FROM prev
	phi_cimage=OPEN(fluxname)
	LOOP FOR iy=miny TO maxy 
		phi_cimage(iy,0..nx DIV us,-nz DIV us..nz DIV us) = phi_c(iy,0..nx DIV us,-nz DIV us..nz DIV us)
	REPEAT
	CLOSE phi_cimage
IF NOT last THEN WRITE TO next


IF has_terminal THEN CLOSE(runfile)


